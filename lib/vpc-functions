#!/bin/bash
#
# vpc-functions

vpcs() {
  local vpc_ids="$(__bma_read_inputs)"
  local filters=$(__bma_read_filters $@)

  aws ec2 describe-vpcs \
    $([[ -n ${vpc_ids} ]] && echo --vpc-ids ${vpc_ids})     \
    --query 'Vpcs[].[
      [VpcId, 
      ((IsDefault==`false`)&&`not-default`)||`default-vpc`, 
      Tags[?Key==`Name`].Value || [`not-named`],
      CidrBlock,
      Tags[?Key==`aws:cloudformation:stack-name`].Value, 
      Tags[?Key==`version`].Value][]
      ][]'                                                  \
    --output text       |
  grep -E -- "$filters" |
  column -s$'\t' -t
}

vpc-lambda-functions(){
  local vpc_ids="$(__bma_read_inputs $@)"
  [[ -z "$vpc_ids" ]] && __bma_usage "vpc-id [vpc-id]" && return 1

  local vpc_id
  for vpc_id in $vpc_ids; do 
    aws lambda list-functions --query "
      Functions[?VpcConfig.VpcId=='$vpc_id'].[
        VpcConfig.VpcId,
        FunctionName
      ]" \
    --output text
  done | column -s$'\t' -t
}

vpc-dhcp-options-ntp(){
  aws ec2 describe-dhcp-options \
    --query "
      DhcpOptions[].DhcpConfigurations[?Key=='ntp-servers'].Values[][].Value
    "                                                                        \
    --output text
}

vpc-igw() {
  local vpc_ids="$(__bma_read_inputs $@)"
  [[ -z "$vpc_ids" ]] && __bma_usage "vpc-id [vpc-id]" && return 1

  local vpc_id
  for vpc_id in $vpc_ids; do 
    aws ec2 describe-internet-gateways --query "
      InternetGateways[?contains(Attachments[].VpcId, '$vpc_id')].[
          InternetGatewayId, 
          join(' ', Attachments[].VpcId) 
      ]" \
    --output text 
  done | column -s$'\t' -t
}

vpc-route-tables(){
  local vpc_ids="$(__bma_read_inputs $@)"
  [[ -z "$vpc_ids" ]] && __bma_usage "vpc-id [vpc-id]" && return 1

  local vpc_id
  for vpc_id in $vpc_ids; do 
    aws ec2 describe-route-tables          \
      --query "
        RouteTables[?VpcId=='$vpc_id'].[[
          RouteTableId, 
          VpcId,
          Tags[?Key=='Name'].Value
        ][]]"                              \
      --output text                        |
      column -s$'\t' -t
  done
}

vpc-nat-gateways(){
  local vpc_ids="$(__bma_read_inputs $@)"
  [[ -z "$vpc_ids" ]] && __bma_usage "vpc-id [vpc-id]" && return 1

  local vpc_id
  for vpc_id in $vpc_ids; do 
    aws ec2 describe-nat-gateways                  \
      --query "
        NatGateways[?VpcId=='$vpc_id'].[
          NatGatewayId, 
          VpcId, 
          join(' ', NatGatewayAddresses[].PublicIp)
        ]"                                         \
      --output text 
  done | column -s$'\t' -t
}

vpc-peering-connections() {
  local vpc_ids="$(__bma_read_inputs $@)"
  [[ -z "$vpc_ids" ]] && __bma_usage "vpc-id [vpc-id]" && return 1

  local vpc_id
  for vpc_id in $vpc_ids; do 
    aws ec2 describe-vpc-peering-connections \
      --query "
        VpcPeeringConnections[].[ 
          VpcPeeringConnectionId, 
          Status.Message, 
          contains(RequesterVpcInfo.VpcId, '$vpc_id') && 
            join(':', [RequesterVpcInfo.OwnerId, RequesterVpcInfo.Region, RequesterVpcInfo.VpcId ]),
          contains(AccepterVpcInfo.VpcId, '$vpc_id') && 
            join(':', [AccepterVpcInfo.OwnerId, RequesterVpcInfo.Region, RequesterVpcInfo.VpcId ]),
          ! contains(RequesterVpcInfo.VpcId, '$vpc_id') && 
            join(':', [RequesterVpcInfo.OwnerId, RequesterVpcInfo.Region, RequesterVpcInfo.VpcId ]),
          ! contains(AccepterVpcInfo.VpcId, '$vpc_id') && 
            join(':', [AccepterVpcInfo.OwnerId, RequesterVpcInfo.Region, RequesterVpcInfo.VpcId ]),
          [Tags[?Key=='Name'].Value][0][0]
      ]" \
      --output text |
    sed 's/False//g'
  done | column -s$'\t' -t | column -t
}

vpc-subnets(){
  local vpc_ids="$(__bma_read_inputs $@)"
  [[ -z "$vpc_ids" ]] && __bma_usage "vpc-id [vpc-id]" && return 1

  local vpc_id
  for vpc_id in $vpc_ids; do 
    aws ec2 describe-subnets                                        \
      --query "Subnets[?VpcId=='$vpc_id'].[
        SubnetId,
        VpcId,
        AvailabilityZone,
        CidrBlock,
        join(' ', [Tags[?Key=='Name'].Value][] || ['not-named'])
      ]"                                                            \
      --output text                                                 |
    sort -k 5
  done | column -s$'\t' -t
}

vpc-azs() {
  local vpc_ids="$(__bma_read_inputs $@)"
  [[ -z "$vpc_ids" ]] && __bma_usage "vpc-id [vpc-id]" && return 1

  local vpc_id
  for vpc_id in $vpc_ids; do
    echo -n "$vpc_id "
    echo "$vpc_id" | vpc-subnets | awk '{print $3}' | sort -u | tr "\n" ' '
    echo
  done
}

vpc-az-count() {
  local vpc_ids="$(__bma_read_inputs $@)"
  [[ -z "$vpc_ids" ]] && __bma_usage "vpc-id [vpc-id]" && return 1

  local vpc_id
  for vpc_id in $vpc_ids; do
    echo "$vpc_id $(( $(vpc-azs $vpc_id | wc -w) - 1 ))"
  done
}

vpc-network-acls(){
  local vpc_ids="$(__bma_read_inputs $@)"
  [[ -z "$vpc_ids" ]] && __bma_usage "vpc-id [vpc-id]" && return 1

  local vpc_id
  for vpc_id in $vpc_ids; do 
    aws ec2 describe-network-acls \
      --query "NetworkAcls[?VpcId=='$vpc_id'].[NetworkAclId, VpcId]" \
      --output text 
  done | column -s$'\t' -t
}


vpc-rds(){
  local vpc_ids="$(__bma_read_inputs $@)"
  [[ -z "$vpc_ids" ]] && __bma_usage "vpc-id [vpc-id]" && return 1

  local vpc_id
  for vpc_id in $vpc_ids; do 
    aws rds describe-db-instances --query "
      DBInstances[?DBSubnetGroup.VpcId=='${vpc_id}'].[
        DBInstanceIdentifier, 
        DBSubnetGroup.VpcId, 
        DBName
      ]" \
    --output text
  done | column -s$'\t' -t
}

# Output commands to delete default VPC
# Exclude default VPCs that contain:
# - instances 
# - lambda functions
#
vpc-default-delete() {
  local REGION=$AWS_DEFAULT_REGION
  # local vpc=$1 
  local VPCID SUBNETS IGW IG INSTANCES

  local abort=false

  local VPCID=$(aws ec2 describe-vpcs --query "Vpcs[?IsDefault].VpcId" --output text)
  if [ "$VPCID" ] ; then

    # abort if instances exist in this VPC
    INSTANCES=$(aws ec2 describe-instances --query "Reservations[].Instances[?VpcId=='$VPCID'].InstanceId" --output text)
    if [ "$INSTANCES" ]; then
      echo "# $VPCID has instances:" $INSTANCES
      abort=true
    fi

    # abort if a lambda function exists in this vpc
    local LAMBDA_FUNCTIONS=$(vpc-lambda-functions $VPCID)
    if [ "$LAMBDA_FUNCTIONS" ]; then
      echo "# $VPCID has lambda functions:" $LAMBDA_FUNCTIONS
      abort=true
    fi

    # abort if an RDS instance exists in this vpc
    local RDS_INSTANCES=$(vpc-rds $VPCID)
    if [ "$RDS_INSTANCES" ]; then
      echo "# $VPCID has RDS instances:" $RDS_INSTANCES
      abort=true
    fi

    [[ "${abort}" != "false"  ]] && echo "# $VPCID skipped" && return 1

    echo "# Deleting default VPC $VPCID in $REGION"
    local SUBNETS="$(aws ec2 describe-subnets --query "Subnets[?VpcId=='$VPCID'].SubnetId" --output text)"
    if [ "$SUBNETS" ] ; then
      for SUBNET in $SUBNETS ; do
        echo aws --region $REGION ec2 delete-subnet --subnet-id=$SUBNET
      done
    fi
  
    # Internet Gateway - must detach and delete
    IGW=$(aws ec2 describe-internet-gateways --query "InternetGateways[?contains(Attachments[].VpcId, '$VPCID')].InternetGatewayId" --output text)
    if [ "$IGW" ] ; then
      for IG in $IGW ; do
        echo aws --region $REGION ec2 detach-internet-gateway --vpc-id $VPCID --internet-gateway-id $IG
        echo aws --region $REGION ec2 delete-internet-gateway --internet-gateway-id $IG
      done
    fi
  
    # And finally the VPC
    echo aws --region $REGION ec2 delete-vpc --vpc-id=$VPCID
  fi
}

