#!/bin/bash
#
# vpc-functions

pcxs(){

  # List VPC Peering connections

  local filters=$(__bma_read_filters $@)
  aws ec2 describe-vpc-peering-connections                     \
    --query 'VpcPeeringConnections[].[
      [VpcPeeringConnectionId,
      Status.Code,
      join(`:`, [
        RequesterVpcInfo.OwnerId,
        RequesterVpcInfo.Region,
        RequesterVpcInfo.VpcId]
      ),
      join(`:`, [
        AccepterVpcInfo.OwnerId,
        AccepterVpcInfo.Region,
        AccepterVpcInfo.VpcId]
      ),
      join(`,`, [Tags[?Key==`Name`].Value || `NO_NAME`][])

    ]]' \
     --output text      |
  grep -E -- "$filters" |
  LC_ALL=C sort -k 5    |
    columnise
}

subnets(){

  # List subnets for all VPCs
  #
  #     $ subnets
  #     subnet-34fd9cfa  vpc-018d9739  ap-southeast-2c  172.31.32.0/20  NO_NAME
  #     subnet-8bb774fe  vpc-018d9739  ap-southeast-2a  172.31.0.0/20   NO_NAME
  #     subnet-9eea2c07  vpc-018d9739  ap-southeast-2b  172.31.16.0/20  NO_NAME

  local subnet_ids=$(skim-stdin)
  local filters=$(__bma_read_filters $@)

  aws ec2 describe-subnets          \
    ${subnet_ids/#/'--subnet-ids '} \
    --output text                   \
    --query "Subnets[].[
      SubnetId,
      VpcId,
      AvailabilityZone,
      CidrBlock,
      join(',', [Tags[?Key=='Name'].Value || 'NO_NAME'][])
    ]"                  |
  grep -E -- "$filters" |
  LC_ALL=C sort -k 5    |
    columnise
}

vpcs() {

  # List VPCs
  #
  #     $ vpcs
  #     vpc-018d9739  default-vpc  NO_NAME  172.31.0.0/16  NO_STACK  NO_VERSION

  local vpc_ids=$(skim-stdin)
  local filters=$(__bma_read_filters $@)

  aws ec2 describe-vpcs       \
    ${vpc_ids/#/'--vpc-ids '} \
    --output text             \
    --query '
      Vpcs[].[
        VpcId,
        ((IsDefault==`false`)&&`not-default`)||`default-vpc`,
        join(`,`, [Tags[?Key==`Name`].Value || `NO_NAME`][]),
        CidrBlock,
        join(`,`, [Tags[?Key==`aws:cloudformation:stack-name`].Value || `NO_STACK`][]),
        join(`,`, [Tags[?Key==`version`].Value || `NO_VERSION`][])
      ]'                |
  grep -E -- "$filters" |
    columnise
}

vpc-azs() {

  # List availability zones of VPC(s)
  #
  #     USAGE: vpc-azs vpc-id [vpc-id]
  #
  #     $ vpcs | vpc-azs
  #     vpc-018d9739 ap-southeast-2a ap-southeast-2b ap-southeast-2c

  local vpc_ids=$(skim-stdin "$@")
  [[ -z "$vpc_ids" ]] && __bma_usage "vpc-id [vpc-id]" && return 1

  local vpc_id
  for vpc_id in $vpc_ids; do
    echo -n "$vpc_id "
    echo "$vpc_id" | vpc-subnets | awk '{print $3}' | LC_ALL=C sort -u | tr "\n" ' '
    echo
  done
}

vpc-az-count() {

  # List number of Availability Zones of VPC(s)
  #
  #     USAGE: vpc-az-count vpc-id [vpc-id]
  #
  #     $ vpcs | vpc-az-count
  #     vpc-018d9739 3

  local vpc_ids=$(skim-stdin "$@")
  [[ -z "$vpc_ids" ]] && __bma_usage "vpc-id [vpc-id]" && return 1

  local vpc_id
  for vpc_id in $vpc_ids; do
    echo "$vpc_id $(( $(vpc-azs $vpc_id | wc -w) - 1 ))"
  done
}

vpc-lambda-functions(){

  # List lambda functions of VPC(s)
  #
  #     USAGE: vpc-lambda-functions vpc-id [vpc-id]

  local vpc_ids=$(skim-stdin "$@")
  [[ -z "$vpc_ids" ]] && __bma_usage "vpc-id [vpc-id]" && return 1

  local vpc_id
  for vpc_id in $vpc_ids; do
    aws lambda list-functions                           \
      --output text                                     \
      --query "Functions[?VpcConfig.VpcId=='$vpc_id'].[
        VpcConfig.VpcId,
        FunctionName
      ]"
  done | columnise
}

vpc-dhcp-options-ntp(){

  # List NTP servers of VPC(s)
  #
  #     USAGE: vpc-dhcp-options-ntp vpc-id [vpc-id]

  aws ec2 describe-dhcp-options                                              \
    --output text                                                            \
    --query "
      DhcpOptions[].DhcpConfigurations[?Key=='ntp-servers'].Values[][].Value
    "
}

vpc-endpoints(){

  # List VPC Endpoints
  #
  #     USAGE: vpc-endpoints [filter]

  local vpc_endpoint_ids=$(skim-stdin)
  local filters=$(__bma_read_filters $@ $vpc_ids)

  aws ec2 describe-vpc-endpoints                \
    ${vpc_endpoint_ids/#/'--vpc-endpoint-ids '} \
    --output text                               \
    --query '
      VpcEndpoints[].[
        VpcEndpointId,
        VpcId,
        State,
        VpcEndpointType,
        ServiceName
      ]'                |
  grep -E -- "$filters" |
  sort -k 5             |
    columnise
}

vpc-endpoint-services(){

  # List available VPC endpoint services
  #
  #     USAGE: vpc-endpoint-services

  local filters=$(__bma_read_filters $@)

  aws ec2 describe-vpc-endpoint-services     \
  --output text                              \
  --query "
    ServiceDetails[].[
      ServiceName,
      join(',', ServiceType[].ServiceType)
    ]"                  |
  grep -E -- "$filters" |
    columnise |
  sort
}

vpc-igw() {

  # List Internet Gateway of VPC(s)
  #
  #     USAGE: vpc-igw vpc-id [vpc-id]

  local vpc_ids=$(skim-stdin "$@")
  [[ -z "$vpc_ids" ]] && __bma_usage "vpc-id [vpc-id]" && return 1

  local vpc_id
  for vpc_id in $vpc_ids; do
    aws ec2 describe-internet-gateways                                       \
      --output text                                                          \
      --query "
        InternetGateways[?contains(Attachments[].VpcId, '$vpc_id')].[
          InternetGatewayId,
          join(',', Attachments[].VpcId)
      ]"
  done | columnise
}

vpc-route-tables(){

  # List Route Tables of VPC(s)
  #
  #     USAGE: vpc-route-tables vpc-id [vpc-id]
  #
  #     $ vpcs | vpc-route-tables
  #     rtb-8e841c39  vpc-018d9739  NO_NAME

  local vpc_ids=$(skim-stdin "$@")
  [[ -z "$vpc_ids" ]] && __bma_usage "vpc-id [vpc-id]" && return 1

  local vpc_id
  for vpc_id in $vpc_ids; do
    aws ec2 describe-route-tables                             \
      --output text                                           \
      --query "
        RouteTables[?VpcId=='$vpc_id'].[
          RouteTableId,
          VpcId,
          join(',', [Tags[?Key=='Name'].Value || 'NO_NAME'][])
        ]"            |
      columnise
  done
}

vpc-nat-gateways(){

  # List NAT Gateways of VPC(s)
  #
  #     USAGE: vpc-nat-gateways vpc-id [vpc-id]

  local vpc_ids=$(skim-stdin "$@")
  [[ -z "$vpc_ids" ]] && __bma_usage "vpc-id [vpc-id]" && return 1

  local vpc_id
  for vpc_id in $vpc_ids; do
    aws ec2 describe-nat-gateways                 \
      --output text                               \
      --query "NatGateways[?VpcId=='$vpc_id'].[
        NatGatewayId,
        VpcId,
        join(',', NatGatewayAddresses[].PublicIp)
      ]"
  done              |
    columnise
}

vpc-subnets(){

  # List subnets of VPC(s)
  #
  #     USAGE: vpc-subnets vpc-id [vpc-id]
  #
  #     $ vpcs | vpc-subnets
  #     subnet-34fd9cfa  vpc-018d9739  ap-southeast-2c  172.31.32.0/20  NO_NAME
  #     subnet-8bb774fe  vpc-018d9739  ap-southeast-2a  172.31.0.0/20   NO_NAME
  #     subnet-9eea2c07  vpc-018d9739  ap-southeast-2b  172.31.16.0/20  NO_NAME

  local vpc_ids=$(skim-stdin "$@")
  [[ -z "$vpc_ids" ]] && __bma_usage "vpc-id [vpc-id]" && return 1

  local vpc_id
  for vpc_id in $vpc_ids; do
    aws ec2 describe-subnets                            \
      --output text                                     \
      --query "Subnets[?VpcId=='$vpc_id'].[ SubnetId ]"
  done | subnets
}

vpc-network-acls(){

  # List Network ACLs of VPC(s)
  #
  #     USAGE: vpc-network-acls vpc-id [vpc-id]
  #
  #     $ vpcs | vpc-network-acls
  #     acl-ff4914d1  vpc-018d9739

  local vpc_ids=$(skim-stdin "$@")
  [[ -z "$vpc_ids" ]] && __bma_usage "vpc-id [vpc-id]" && return 1

  local vpc_id
  for vpc_id in $vpc_ids; do
    aws ec2 describe-network-acls                                    \
      --output text                                                  \
      --query "NetworkAcls[?VpcId=='$vpc_id'].[NetworkAclId, VpcId]"
  done | columnise
}

vpc-rds(){

  # List RDS instances of VPC(s)
  #
  #     USAGE: vpc-rds vpc-id [vpc-id]

  local vpc_ids=$(skim-stdin "$@")
  [[ -z "$vpc_ids" ]] && __bma_usage "vpc-id [vpc-id]" && return 1

  local vpc_id
  for vpc_id in $vpc_ids; do
    aws rds describe-db-instances                               \
      --output text                                             \
      --query "DBInstances[?DBSubnetGroup.VpcId=='${vpc_id}'].[
        DBInstanceIdentifier,
        DBSubnetGroup.VpcId,
        DBName
      ]"
  done | columnise
}

vpc-default-delete() {

  # Print commands you would need to run to delete that pesky default VPC
  # Exclude default VPCs that contain:
  # - instances
  # - lambda functions
  #
  #     $ vpc-default-delete
  #
  #     # Deleting default VPC vpc-018d9739 in ap-southeast-2
  #     aws --region ap-southeast-2 ec2 delete-subnet --subnet-id=subnet-8bb774fe
  #     aws --region ap-southeast-2 ec2 delete-subnet --subnet-id=subnet-9eea2c07
  #     aws --region ap-southeast-2 ec2 delete-subnet --subnet-id=subnet-34fd9cfa
  #     aws --region ap-southeast-2 ec2 delete-vpc --vpc-id=vpc-018d9739

  local REGION=$AWS_DEFAULT_REGION
  local VPCID SUBNETS IGW IG INSTANCES

  local abort=false

  local VPCID=$(aws ec2 describe-vpcs --query "Vpcs[?IsDefault].VpcId" --output text)
  if [ "$VPCID" ] ; then

    # abort if instances exist in this VPC
    INSTANCES=$(aws ec2 describe-instances --query "Reservations[].Instances[?VpcId=='$VPCID'].InstanceId" --output text)
    if [ "$INSTANCES" ]; then
      echo "# $VPCID has instances:" $INSTANCES
      abort=true
    fi

    # abort if a lambda function exists in this vpc
    local LAMBDA_FUNCTIONS=$(vpc-lambda-functions $VPCID)
    if [ "$LAMBDA_FUNCTIONS" ]; then
      echo "# $VPCID has lambda functions:" $LAMBDA_FUNCTIONS
      abort=true
    fi

    # abort if an RDS instance exists in this vpc
    local RDS_INSTANCES=$(vpc-rds $VPCID)
    if [ "$RDS_INSTANCES" ]; then
      echo "# $VPCID has RDS instances:" $RDS_INSTANCES
      abort=true
    fi

    [[ "${abort}" != "false"  ]] && echo "# $VPCID skipped" && return 1

    echo "# Deleting default VPC $VPCID in $REGION"
    local SUBNETS="$(aws ec2 describe-subnets --query "Subnets[?VpcId=='$VPCID'].SubnetId" --output text)"
    if [ "$SUBNETS" ] ; then
      for SUBNET in $SUBNETS ; do
        echo aws --region $REGION ec2 delete-subnet --subnet-id=$SUBNET
      done
    fi

    # Internet Gateway - must detach and delete
    IGW=$(aws ec2 describe-internet-gateways --query "InternetGateways[?contains(Attachments[].VpcId, '$VPCID')].InternetGatewayId" --output text)
    if [ "$IGW" ] ; then
      for IG in $IGW ; do
        echo aws --region $REGION ec2 detach-internet-gateway --vpc-id $VPCID --internet-gateway-id $IG
        echo aws --region $REGION ec2 delete-internet-gateway --internet-gateway-id $IG
      done
    fi

    # And finally the VPC
    echo aws --region $REGION ec2 delete-vpc --vpc-id=$VPCID
  fi
}


subnet-ips() {
  # List IP addresses for a subnet along with the resources they are allocated to
  #
  # USAGE: subnet-ips subnet-id [subnet-id...]
  #
  # EXAMPLE:
  #     $ subnet-ips subnet-12345678
  #     10.0.1.10  eni-1234567890abcdef  EC2 Instance  i-abcdef1234567890
  #     10.0.1.20  eni-0987654321fedcba  RDS Instance  db-foobar
  #     10.0.1.30  eni-1a2b3c4d5e6f7g8h  Unknown       unknown

  local subnet_ids=$(skim-stdin "$@")
  [[ -z "$subnet_ids" ]] && __bma_usage "subnet-id [subnet-id...]" && return 1

  local subnet_id
  for subnet_id in $subnet_ids; do
    # Get all network interfaces in the subnet
    aws ec2 describe-network-interfaces \
      --filters "Name=subnet-id,Values=$subnet_id" \
      --query "NetworkInterfaces[].[PrivateIpAddress,NetworkInterfaceId,Attachment.InstanceId,Description]" \
      --output text | while read -r ip eni instance_id description; do
        resource_type="Unknown"
        resource_id="unknown"
        
        if [[ $description == *"ELB"* ]]; then
          resource_type="Load Balancer"
          resource_id=$(echo $description | awk '{print $2}')
        elif [[ $description == *"RDSNetworkInterface"* ]]; then
          resource_type="RDS Instance"
          resource_id=$(aws rds describe-db-instances --query "DBInstances[?DBSubnetGroup.Subnets[?contains(@,'$subnet_id')]].DBInstanceIdentifier" --output text)
        elif [[ -n $instance_id ]]; then
          resource_type="EC2 Instance"
          resource_id=$instance_id
        fi

        echo -e "$ip\t$eni\t$resource_type\t$resource_id"
    done
  done | sort -V | columnise
}

network-interfaces() {
  # List network interfaces with key information
  #
  # USAGE: network-interfaces [filter]
  #
  # EXAMPLE:
  #     $ network-interfaces
  #     10.0.1.10  203.0.113.10  eni-1234567890abcdef  subnet-a1b2c3d4  vpc-11223344  in-use  default,web-tier  ELB net/my-nlb/1234567890abcdef

  local filters=$(__bma_read_filters $@)

  aws ec2 describe-network-interfaces \
    --query 'NetworkInterfaces[].[
      PrivateIpAddress,
      Association.PublicIp || `N/A`,
      NetworkInterfaceId,
      VpcId,
      SubnetId,
      Status,
      Description
    ]' \
    --output text |
  grep -E -- "$filters" |
  sort -V -k1,1 -k2,2 |
  columnise

  # join(`,`, Groups[].GroupName), # too noisy
}

vpc-endpoint-policy() {
  # Show policy for VPC endpoint(s)
  #
  #     USAGE: vpc-endpoint-policy vpc-endpoint-id [vpc-endpoint-id]
  #
  #     $ vpc-endpoints | vpc-endpoint-policy
  #     vpce-0123456789abcdef0    {
  #                                 "Version": "2008-10-17",
  #                                 "Statement": [...]
  #                               }

  local vpc_endpoint_ids=$(skim-stdin "$@")
  [[ -z "$vpc_endpoint_ids" ]] && __bma_usage "vpc-endpoint-id [vpc-endpoint-id]" && return 1

  local vpc_endpoint_id
  for vpc_endpoint_id in $vpc_endpoint_ids; do
    local policy=$(aws ec2 describe-vpc-endpoints \
      --vpc-endpoint-ids "$vpc_endpoint_id" \
      --query "VpcEndpoints[0].PolicyDocument" \
      --output text)
    
    # Pretty print the JSON policy
    echo "$vpc_endpoint_id    $(echo "$policy" | jq '.' | sed '2,$s/^/                               /')"
  done
}
