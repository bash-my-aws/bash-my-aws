#!/bin/bash
#
# elbv2-functions
#
# Network and Application Load Balancers (2nd Generation)


elbv2s() {

  # List EC2 ELBv2 load balancers (both Network and Application types)
  # Accepts Load Balancer names on STDIN and converts to Network Load Balancer names
  #
  #     $ elbv2s
  #     bash-my-aws      network      internet-facing  active        2020-01-04T11:18:49.733Z
  #     bash-my-aws-alb  application  internet-facing  provisioning  2020-01-04T11:29:45.030Z

  local elbv2_names=$(skim-stdin)
  local filters=$(__bma_read_filters $@)

  aws elbv2 describe-load-balancers \
    ${elbv2_names/#/'--names '}     \
    --output text                   \
    --query "
      LoadBalancers[][
        LoadBalancerName,
        Type,
        Scheme,
        State.Code,
        CreatedTime
      ]"                |
  grep -E -- "$filters" |
  LC_ALL=C sort -k 5    |
  column -s$'\t' -t
}


elbv2-dnsname(){

  # List DNS Names of elbv2(s)
  #
  #     USAGE: elbv2-dnsname load-balancer [load-balancer]
  #
  #     $ elbv2s | elbv2-dnsname
  #     bash-my-aws      bash-my-aws-c23c598688520e51.elb.ap-southeast-2.amazonaws.com
  #     bash-my-aws-alb  bash-my-aws-alb-2036199590.ap-southeast-2.elb.amazonaws.com

  local elbv2_names=$(skim-stdin "$@")
  [[ -z "${elbv2_names}" ]] && __bma_usage "load-balancer [load-balancer]" && return 1

  aws elbv2 describe-load-balancers \
    --names $elbv2_names            \
    --output text                   \
    --query "
      LoadBalancers[][
        LoadBalancerName,
        DNSName
      ]"              |
    column -s$'\t' -t
}


elbv2-subnets() {

  # List subnets of ELBv2(s) [Application and Network Load Balancers)
  #
  #     USAGE: elbv2-subnets load-balancer [load-balancer]
  #
  #     $ elbv2s | elbv2-subnets
  #     bash-my-aws      subnet-c25fa0a7
  #     bash-my-aws-alb  subnet-7828cd0f subnet-c25fa0a7

  local elbv2_names=$(skim-stdin "$@")
  [[ -z "${elbv2_names}" ]] && __bma_usage "load-balancer [load-balancer]" && return 1

  aws elbv2 describe-load-balancers \
    --names $elbv2_names            \
    --output text                   \
    --query "
      LoadBalancers[][
        LoadBalancerName,
        join(' ', AvailabilityZones[].SubnetId)
      ]"              |
    column -s$'\t' -t
}


elbv2-azs() {

  # List Availability Zones of ELB(s)
  #
  #     USAGE: elb-azs load-balancer [load-balancer]
  #
  #     $ elbv2s | elbv2-subnets
  #     bash-my-aws      ap-southeast-2a
  #     bash-my-aws-alb  ap-southeast-2a ap-southeast-2b

  local elbv2_names=$(skim-stdin "$@")
  [[ -z $elbv2_names ]] && __bma_usage "load-balancer [load-balancer]" && return 1

  aws elbv2 describe-load-balancers \
    --names $elbv2_names            \
    --output text                   \
    --query "
      LoadBalancers[][
        LoadBalancerName,
        join(' ', sort(AvailabilityZones[].ZoneName))
      ]"              |
    column -s$'\t' -t
}


elbv2-instances() {

  # List EC2 ELBv2 target group instances
  # Accepts Target Group names on stdin or as arguments
  #
  #     $ elbv2s-instanes bash-my-aws-nlb-tg
  #     bash-my-aws-nlb-tg  i-0709fdcce31cf64bc  443  healthy
  #     bash-my-aws-nlb-tg  i-0434e654ae0cfe98b  443  unhealthy

  local tg_names=$(skim-stdin "$@")

  for tg in $tg_names; do
    arn=$(aws elbv2 describe-target-groups \
      --names "$tg"                        \
      --output text                        \
      --query "
        TargetGroups[][
          TargetGroupArn
        ]
      ")
    aws elbv2 describe-target-health       \
      --target-group-arn "$arn"            \
      --output text                        \
      --query "
        TargetHealthDescriptions[][
          Target.Id,
          Target.Port,
          TargetHealth.State
        ]
      "                     |
      sed "s/^/$tg"$'\t'"/"
  done                      |
  column -s$'\t' -t
}


elbv2-target-groups() {

  # List EC2 ELBv2 target groups
  # Accepts ELBv2 target group names on stdin or as arguments
  #
  #     $ elbv2s-target-groups
  #     bash-my-aws-nlb-tg  TCP   22   vpc-04636ebe5573f6f65  bash-my-aws-nlb
  #     bash-my-aws-alb-tg  HTTP  443  vpc-04636ebe5573f6f65  bash-my-aws-alb

  local tg_names=$(skim-stdin "$@")

  aws elbv2 describe-target-groups \
    ${tg_names/#/'--names '}       \
    --output text                  \
    --query "
      TargetGroups[][
        TargetGroupName,
        Protocol,
        Port,
        VpcId,
        join(' ', LoadBalancerArns[])
      ]"                                                     |
      sed 's,arn:[^/]*:loadbalancer/[^/]*/\([^/]*\).*$,\1,g' |
      column -s$'\t ' -t
}
