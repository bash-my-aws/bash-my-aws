#!/bin/bash
#
# cert-functions


certs() {

  # List ACM Certificates

  local cert_arns=$(skim-stdin)
  local filters=$(__bma_read_filters $@)

  local include_arn_bit=''
  [[ -n ${include_arn:-} ]] && include_arn_bit="CertificateArn,"
  local retrieved_cert_arns=$(
    aws acm list-certificates      \
      --includes keyTypes=RSA_1024,RSA_2048,EC_secp384r1,EC_prime256v1,EC_secp521r1,RSA_3072,RSA_4096 \
      --output text                \
      --query "
        CertificateSummaryList[${cert_arns:+?contains(['${cert_arns// /"','"}'], CertificateArn)}].[
          CertificateArn
        ]"
  )

  local cert_arn
  for cert_arn in $retrieved_cert_arns; do
    aws acm describe-certificate    \
      --certificate-arn "$cert_arn" \
      --output text                 \
      --query "
        Certificate.[
          $include_arn_bit
          DomainName,
          Status,
          length(InUseBy)==\`0\` && 'not-in-use' || 'in-use',
          NotBefore,
          NotAfter,
          join(',', [DomainValidationOptions[].ValidationMethod][])
      ]"
  done |
  grep -E -- "$filters" |
  LC_ALL=C sort -b -k 5 | # sort by NotAfter
  column -t
}


certs-arn() {

  # Same as `certs` but with the ARN in first column

  local include_arn=true
  certs $@
}


cert-users() {

  # List resources using ACM Cert(s)
  #
  #     USAGE: cert-users cert-arn [cert-arn]

  local cert_arns=$(skim-stdin "$@")
  [[ -z "$cert_arns" ]] && __bma_usage "cert-arn [cert-arn]" && return 1

  local cert_arns
  for cert_arn in $cert_arns; do
    aws acm describe-certificate       \
      --certificate-arn "$cert_arn"  \
      --output text                    \
      --query "Certificate.InUseBy[].[
        @,
        \`$cert_arn\`
      ]"
  done |
  column -s$'\t' -t
}


cert-delete() {

  # Delete ACM Cert(s)
  #
  #     USAGE: cert-delete cert-arn [cert-arn]

  local cert_arns=$(skim-stdin "$@")
  [[ -z "$cert_arns" ]] && __bma_usage "cert-arn [cert-arn]" && return 1

  echo "You are about to delete the following certificates:"
  echo "$cert_arns" | tr " " "\n"
  [ -t 0 ] || exec </dev/tty # reattach keyboard to STDIN
  local regex_yes="^[Yy]$"
  read -p "Are you sure you want to continue? " -n 1 -r
  echo
  if [[ $REPLY =~ $regex_yes ]]
  then
    local cert_arn
    for cert_arn in $cert_arns; do
      aws acm delete-certificate --certificate-arn "$cert_arn"
    done
  fi
}

cert-ificate() {

  # Return Certificate for ACM Cert(s)
  #
  #     USAGE: cert-ificate cert-arn [cert-arn]

  local cert_arns=$(skim-stdin "$@")
  [[ -z "$cert_arns" ]] && __bma_usage "cert-arn [cert-arn]" && return 1

  local cert_arns
  for cert_arn in $cert_arns; do
    aws acm get-certificate \
      --certificate-arn "$cert_arn"  \
      --output text \
      --query Certificate
  done
}

cert-chain() {

  # Return Cert Chain for ACM Cert(s)
  #
  #     USAGE: cert-chain cert-arn [cert-arn]

  local cert_arns=$(skim-stdin "$@")
  [[ -z "$cert_arns" ]] && __bma_usage "cert-arn [cert-arn]" && return 1

  local cert_arns
  for cert_arn in $cert_arns; do
    aws acm get-certificate \
      --certificate-arn "$cert_arn"  \
      --output text \
      --query CertificateChain
  done
}
