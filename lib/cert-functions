#!/bin/bash
#
# cert-functions

certs() {

  # List ACM Certificates

  local cert_arns=$(skim-stdin)
  local filters=$(__bma_read_filters $@)

  local include_arn_bit=''
  [[ -n ${include_arn:-} ]] && include_arn_bit="CertificateArn,"
  local retrieved_cert_arns=$(
    aws acm list-certificates \
      --output text \
      --query "
        CertificateSummaryList[${cert_arns:+?contains(['${cert_arns// /"','"}'], CertificateArn)}].[
          CertificateArn
        ]"
  )

  local cert_arn
  for cert_arn in $retrieved_cert_arns; do
    aws acm describe-certificate \
      --certificate-arn "$cert_arn" \
      --output text \
      --query "
        Certificate.[
          $include_arn_bit
          DomainName,
          Status,
          length(InUseBy)==\`0\` && 'not-in-use' || 'in-use',
          NotBefore,
          NotAfter,
          join(',', [DomainValidationOptions[].ValidationMethod][])
      ]"
  done |
    grep -E -- "$filters" |
    LC_ALL=C sort -b -k 5 | # sort by NotAfter
    column -t
}

certs-arn() {

  # Same as `certs` but with the ARN in first column

  local include_arn=true
  certs $@
}

cert-users() {

  # List resources using ACM Cert(s)
  #
  #     USAGE: cert-users cert-arn [cert-arn]

  local cert_arns=$(skim-stdin "$@")
  [[ -z "$cert_arns" ]] && __bma_usage "cert-arn [cert-arn]" && return 1

  local cert_arns
  for cert_arn in $cert_arns; do
    aws acm describe-certificate \
      --certificate-arn "$cert_arn" \
      --output text \
      --query "Certificate.InUseBy[].[
        @,
        \`$cert_arn\`
      ]"
  done |
    columnise
}

cert-delete() {

  # Delete ACM Cert(s)
  #
  #     USAGE: cert-delete cert-arn [cert-arn]

  local cert_arns=$(skim-stdin "$@")
  [[ -z "$cert_arns" ]] && __bma_usage "cert-arn [cert-arn]" && return 1

  echo "You are about to delete the following certificates:"
  echo "$cert_arns" | tr " " "\n"
  [ -t 0 ] || exec </dev/tty # reattach keyboard to STDIN
  local regex_yes="^[Yy]$"
  read -p "Are you sure you want to continue? " -n 1 -r
  echo
  if [[ $REPLY =~ $regex_yes ]]; then
    local cert_arn
    for cert_arn in $cert_arns; do
      aws acm delete-certificate --certificate-arn "$cert_arn"
    done
  fi
}

cert-ificate() {

  # Return Certificate for ACM Cert(s)
  #
  #     USAGE: cert-ificate cert-arn [cert-arn]

  local cert_arns=$(skim-stdin "$@")
  [[ -z "$cert_arns" ]] && __bma_usage "cert-arn [cert-arn]" && return 1

  local cert_arns
  for cert_arn in $cert_arns; do
    aws acm get-certificate \
      --certificate-arn "$cert_arn" \
      --output text \
      --query Certificate
  done
}

cert-chain() {

  # Return Cert Chain for ACM Cert(s)
  #
  #     USAGE: cert-chain cert-arn [cert-arn]

  local cert_arns=$(skim-stdin "$@")
  [[ -z "$cert_arns" ]] && __bma_usage "cert-arn [cert-arn]" && return 1

  local cert_arns
  for cert_arn in $cert_arns; do
    aws acm get-certificate \
      --certificate-arn "$cert_arn" \
      --output text \
      --query CertificateChain
  done
}

cert-resource-record-valid() {

  # cert-resource-record-valid - Check if a specified DNS resource record matches the expected value and includes input validation.
  #
  # Usage: cert-resource-record-valid <name> <type> <value>

  [[ "$#" -ne 3 ]] && __bma_usage "<name> <type> <value" && return 1

  local name="$1"
  local type="$2"
  local value="$3"

  # Perform the DNS query
  local output=$(dig +noall +answer "$name" "$type")

  # Print the output of the DNS query
  echo "Query output:"
  echo "$output"

  # Check if the expected value is in the output
  if echo "$output" | grep -q "$value"; then
      echo "The DNS record is valid."
      return 0
  else
      echo "The DNS record is invalid or does not exist."
      return 1
  fi
}


# openssl verify -CAfile trusted-ca.crt -untrusted chain.crt cert.crt

cert-verify() {

  # Verify ACM cert(s)
  #
  #     USAGE: cert-chain cert-arn [cert-arn]

  local cert_arns=$(skim-stdin "$@")
  # Be quiet - makes it easier to scan with "cert-arns | cert_verify"
  # [[ -z "$cert_arns" ]] && __bma_usage "cert-arn [cert-arn]" && return 1

  local cert_arns
  for cert_arn in $cert_arns; do

    local cert_name=$(echo "$cert_arn" | bma certs | awk '{print $1}')

    # echo -n "$cert_name ($cert_arn): "
    echo -n "$cert_name : "

    local output=$(
      openssl verify \
      -CAfile /etc/ssl/certs/ca-certificates.crt \
      -untrusted <(cert-chain "$cert_arn") \
      <(cert-ificate "$cert_arn") 2>&1 |
      sed 's#/dev/fd/[0-9]*: ##'
    )
    [[ -n $output ]] && echo $output # lose the newlines
  done
}
