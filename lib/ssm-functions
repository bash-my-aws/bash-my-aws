#!/usr/bin/env bash

# ssm-functions - AWS Systems Manager functions

# aws ssm get-command-invocation - get more detail

ssm-association-last-execution-step-failures(){
  ssm-association-executions \
  | tail -1 \
  | bma ssm-association-execution-targets \
  | grep Failed \
  | cut -f4 \
  | bma ssm-automation-step-executions \
  | grep -v -e Pending -e Success \
  | columnise
}

ssm-command-invocations() {
  # List SSM command invocations for EC2 Instance(s)
  #
  # USAGE: instance-ssm-command-invocations instance [instance]
  #
  # $ instances | instance-ssm-command-invocations 
  # ee069cbe-7ed8-4d36-b7be-fdbcb0e31b3b  i-039b49e9e20597891  Command1   Success  None
  # 097991f9-c877-4c61-8544-03a1e3dd8e13  i-039b49e9e20597891  Command2   Success  None
  # 472a1760-bc29-40b2-a9fc-1882b571e215  i-039b49e9e20597891  Command3   Success  None
  # 8adc95f0-d8c9-4d43-ab71-330a7b4c6a0d  i-039b49e9e20597891  Command4   Success  None
  # 63de4ddf-a179-460b-af47-026fc090017f  i-039b49e9e20597891  Command5   Success  None
  # 37ee3dee-7bbb-4ba8-b2c2-aefc8bb56a9e  i-039b49e9e20597891  Command6   Success  None

  local instances=$(skim-stdin "$@")
  # [[ -z $instance ]] && __bma_usage "instance [instance]" && return 1

  local filters
  filters+=${BMA_ARG_STATUS:+"key=Status,value=$BMA_ARG_STATUS"}  
  filters+=" key=InvokedAfter,value=$(date -u "+%Y-%m-%dT%H:%M:%SZ" --date "1 day ago")" # XXX Make configurable

  local instance
  for instance in ${instances:-''}; do
    aws ssm list-command-invocations     \
      ${instance:+--instance-id "$instance"} \
      ${filters:+--filters $filters}       \
      --output text                           \
      --max-items 1000                        \
      --query "
        CommandInvocations[][
          CommandId,
          InstanceId,
          DocumentName,
          Status,
          RequestedDateTime,
          Comment
        ]"                |
    LC_ALL=C sort -t$'\t' -k 5 |
    columnise
  done
}

ssm-command-invocations-failed() {
  local BMA_ARG_STATUS=failed
  ssm-command-invocations "$@"
}

ssm-command-invocation() {

  # Show details for an SSM Command Invocation
  #
  # Usage: ssm-command-invocation command instance
  #
  # $ ssm-command-invocation 12345678-90ab-cdef-1234-567890abcdef i-01234abcde56789f0

  inputs=$(skim-stdin-2 "$@")
  [[ -z $inputs ]] && __bma_usage "command instance" && return 1

  local command instance
  while IFS=$'\t' read -r command instance; do
    aws ssm get-command-invocation \
        --command-id "${command}" \
        --instance-id "${instance}" # \
        # --query "CommandInvocations[].[CommandPlugins[?Status=='Failed'].[Name, Output]][]" \
        # --output text
  done <<< "$inputs"
}

ssm-command-invocation-failed() {

  local instances=$(skim-stdin "$@")
  # local plugin='runShellScript'
  [[ -z $instances ]] && __bma_usage "instance [instance]" && return 1

  local instance
  for instance in $instances; do
    echo -e "\n${instance}"
    aws ssm list-command-invocations \
        --instance-id "${instance}" \
        --filters key=Status,value=Failed \
        --details # \
        # --query "CommandInvocations[].[CommandPlugins[?Status=='Failed'].[Name, Output]][]" \
        #  --output text
  done
}

# Most recent failed automations
ssm-association-fail-last(){
  local association="${1:-}"
  ssm-associations "$association" | tee /dev/tty \
  | ssm-association-executions \
  | rg Failed \
  | tail -1 | tee /dev/tty \
  | ssm-association-execution-targets

  # 459004af-cf9e-4e04-9802-a99acf658b29	InstallAndLinkAgents	InstallAndLinkAgents	cron(0 8 ? * * *)	2023-12-07T19:06:26+11:00	Failed
  # 459004af-cf9e-4e04-9802-a99acf658b29	6ae13f8b-98c2-4476-b2d9-0f2b71736a89	Failed	{Failed=4}	2023-12-07T19:01:30.213000+11:00
  # 459004af-cf9e-4e04-9802-a99acf658b29  6ae13f8b-98c2-4476-b2d9-0f2b71736a89  i-0a1bb45ae0b6841cf  e56ba970-dc9c-4efa-af75-b0a0dd3b9c93  Failed  2023-12-07T19:03:58+11:00
  # 459004af-cf9e-4e04-9802-a99acf658b29  6ae13f8b-98c2-4476-b2d9-0f2b71736a89  i-0f044cea6d953aa36  85546efd-b525-4001-9749-c77eeceb46a7  Failed  2023-12-07T19:03:58+11:00
  # 459004af-cf9e-4e04-9802-a99acf658b29  6ae13f8b-98c2-4476-b2d9-0f2b71736a89  i-0bbaa71be80ce4419  e0e48736-78f9-4c2b-8358-e3e455dde729  Failed  2023-12-07T19:06:25+11:00
  # 459004af-cf9e-4e04-9802-a99acf658b29  6ae13f8b-98c2-4476-b2d9-0f2b71736a89  i-0713cddda0f432d62  76cc092e-00ee-492c-8ac9-5f1730347443  Failed  2023-12-07T19:06:26+11:00

  # Now dig deeper to get the commands!

  # $ ssm-automation-step-executions 76cc092e-00ee-492c-8ac9-5f1730347443
  # 76cc092e-00ee-492c-8ac9-5f1730347443
  # 76cc092e-00ee-492c-8ac9-5f1730347443  fc7cac46-9e94-4525-b3dd-5b49e0c598ac  CheckSSMOnline          Success  aws:assertAwsResourceProperty  None                                  2023-12-07T19:03:59.115000+11:00  2023-12-07T19:03:59.430000+11:00
  # 76cc092e-00ee-492c-8ac9-5f1730347443  1b88c056-8f95-4c15-bb6a-afc657e5aeb5  getSSMParams            Success  aws:executeScript              None                                  2023-12-07T19:03:59.683000+11:00  2023-12-07T19:04:12.736000+11:00
  # 76cc092e-00ee-492c-8ac9-5f1730347443  700de8b4-5eae-4582-b6be-6d41f7091056  NoOp                    Success  aws:sleep                      None                                  2023-12-07T19:06:25.763000+11:00  2023-12-07T19:06:25.856000+11:00
  # 76cc092e-00ee-492c-8ac9-5f1730347443  90486d41-8d49-42bc-a4fc-aae2297c5761  InstallAndLinkDefender  Failed   aws:executeAutomation          f76f242a-a8d4-4450-935f-8a4208cf1754  2023-12-07T19:04:12.949000+11:00  2023-12-07T19:06:25.517000+11:00


  # $ ssm-automation-step-executions f76f242a-a8d4-4450-935f-8a4208cf1754
  # f76f242a-a8d4-4450-935f-8a4208cf1754
  # f76f242a-a8d4-4450-935f-8a4208cf1754  b73cc93b-1733-43dd-993d-f8ae8ff38952  ChoiceDefender        Success  aws:branch      None                                  2023-12-07T19:04:13.684000+11:00  2023-12-07T19:04:13.815000+11:00
  # f76f242a-a8d4-4450-935f-8a4208cf1754  2b03b1ce-b39a-4533-97dd-4d7d5dd5a836  Exempt                Pending  aws:sleep       None                                  None                              None
  # f76f242a-a8d4-4450-935f-8a4208cf1754  882c102b-724f-4751-ace4-cb577745c2a2  NoOp                  Pending  aws:sleep       None                                  None                              None
  # f76f242a-a8d4-4450-935f-8a4208cf1754  ac32131e-154f-479e-9b30-48ca0402dfd3  InstallDefenderLinux  Failed   aws:runCommand  e6574b26-5e4b-4fe0-9c90-82089c8470bc  2023-12-07T19:04:14.034000+11:00  2023-12-07T19:06:25.011000+11:00

# $ ssm-command-invocation e6574b26-5e4b-4fe0-9c90-82089c8470bc i-0713cddda0f432d62 --detail
# {
#     "CommandId": "e6574b26-5e4b-4fe0-9c90-82089c8470bc",
#     "InstanceId": "i-0713cddda0f432d62",
#     "Comment": "",
#     "DocumentName": "AWS-RunRemoteScript",
#     "DocumentVersion": "$DEFAULT",
#     "ResponseCode": 0,
#     "ExecutionEndDateTime": "",
#     "Status": "Failed",
#     "StatusDetails": "Failed",
#     "CloudWatchOutputConfig": {
#         "CloudWatchLogGroupName": "",
#         "CloudWatchOutputEnabled": false
#     }
# }


}

skim-stdin-2() {
  { 
    [[ $# -ge 2 ]] && printf "%s\t%s\n" "$1" "$2"
    # Read from STDIN if data is available
    if ! [[ -t 0 ]]; then
      cat
    fi
  } | awk -F'\t' 'NF>=2 {print $1 "\t" $2}' 
}

ssm-association-executions() {

  # List SSM Association Executions
  #
  #     USAGE: ssm-associations [filter]
  #
  #     $ ssm-associations
  #     12345678-9abc-def0-1234-56789abcdef0  a1b2c3d4-e5f6-7890-a1b2-c3d4e5f67890  Success  {Success=10}  2023-07-21T10:30:00.000000+00:00
  #     12345678-9abc-def0-1234-56789abcdef0  b1c2d3e4-f5g6-7890-b1c2-d3e4f5g67890  Success  {Success=15}  2023-07-22T11:00:00.000000+00:00
  #     12345678-9abc-def0-1234-56789abcdef0  c1d2e3f4-g5h6-7890-c1d2-e3f4g5h67890  Success  {Success=13}  2023-07-23T09:45:00.000000+00:00
  #     12345678-9abc-def0-1234-56789abcdef0  d1e2f3g4-h5i6-7890-d1e2-f3g4h5i67890  Failed   {Failed=2, Success=12} 2023-07-24T12:30:00.000000+00:00
  #     12345678-9abc-def0-1234-56789abcdef0  e1f2g3h4-i5j6-7890-e1f2-g3h4i5j67890  Failed   {Failed=3, Success=11}  2023-07-25T14:15:00.000000+00:00

  local associations=$(skim-stdin "$@")
  [[ -z $associations ]] && __bma_usage "association [association]" && return 1

  local association
  for association in $associations; do
    aws ssm describe-association-executions \
      --association-id "$association" \
      --output text \
      --query '
        AssociationExecutions[].[
          AssociationId,
          ExecutionId,
          Status,
          ResourceCountByStatus,
          CreatedTime
        ]' \
    | LC_ALL=C sort -k 5 -t $'\t' \
    | columnise
  done
}

ssm-association-execution-targets() {

  # List targets for SSM Association Execution
  #
  #     USAGE: ssm-association-execution-targets association execution
  #
  #     $ association-execution-targets abcd1234-ef56-7890-gh12-ijk3456lmnop  12345678-90ab-cdef-1234-567890abcdef
  #     abcd1234-ef56-7890-gh12-ijk3456lmnop  12345678-90ab-cdef-1234-567890abcdef  i-01234abcde56789f0  Success  Success  2023-08-10T11:30:00.000000+00:00
  #     abcd1234-ef56-7890-gh12-ijk3456lmnop  12345678-90ab-cdef-1234-567890abcdef  i-02345bcdef67891g1  Success  Success  2023-08-10T11:30:10.000000+00:00
  #     abcd1234-ef56-7890-gh12-ijk3456lmnop  12345678-90ab-cdef-1234-567890abcdef  i-03456cdefg78912h2  Success  Success  2023-08-10T11:30:20.000000+00:00
  #     abcd1234-ef56-7890-gh12-ijk3456lmnop  12345678-90ab-cdef-1234-567890abcdef  i-04567defgh89123i3  Success  Success  2023-08-10T11:30:30.000000+00:00

  # Append first two items from each line of STDIN to first two arguments

  # Check if we have at least one argument or data from STDIN
  if [[ $# -eq 0 && -t 0 ]]; then
    echo "Error: No input provided. Usage: ssm-association-execution-targets association execution" >&2
    return 1
  fi

  # Handle arguments and/or STDIN
  inputs=$(skim-stdin-2 "$@")
  
  while IFS=$'\t' read -r association execution; do
    aws ssm describe-association-execution-targets \
      --association-id "$association" \
      --execution-id "$execution" \
      --output text \
      --query "
        AssociationExecutionTargets[].[
          AssociationId,
          ExecutionId,
          ResourceId,
          OutputSource.OutputSourceId,
          Status,
          LastExecutionDate
        ]" \
    | LC_ALL=C sort -k 5 -t $'\t'
  done <<< "$inputs" \
  | columnise

}

ssm-automation-executions() {

  # List recent SSM Automation Executions

  # USAGE: ssm-automation-executions [filter]
  #
  #     $ ssm-automation-executions
  #     1234abcd-ef56-7890-gh12-ijk3456lmnop  UpdateAndSecureNodes    None                 Failed   2023-07-20T09:00:00.000000+00:00  None
  #     5678efgh-ijkl-9012-mnop-qrstuvwx3456  UpdateAndSecureNodes    i-0a1b2c3d4e5f67890  Failed   2023-07-20T09:00:10.000000+00:00  None
  #     90abijkl-mnop-4567-qrst-uvwxyza12345  UpdateAndSecureNodes    i-1b2c3d4e5f6g78901  Failed   2023-07-20T09:00:20.000000+00:00  None
  #     cdefmnop-qrst-8910-uvwx-yzab1234cdef  UpdateAndSecureNodes    i-2c3d4e5f6g7h89012  Failed   2023-07-20T09:00:30.000000+00:00  None
  #     ghijqrst-uvwx-2345-yzab-abcd5678efgh  UpdateAndSecureNodes    i-3d4e5f6g7h8i90123  Failed   2023-07-20T09:00:40.000000+00:00  None

  local filters=$(__bma_read_filters $@)
  aws ssm describe-automation-executions \
    --filter Key=StartTimeAfter,Values="$(date -d yesterday -I)T00:00:00Z" \
    --output text \
    --query '
      AutomationExecutionMetadataList[].[
        AutomationExecutionId,
        DocumentName,
        Target,
        AutomationExecutionStatus,
        ExecutionStartTime,
        ExecutionEndime
      ]' \
  | grep -E -- "$filters" \
  | LC_ALL=C sort -k 5 -t $'\t' \
  | columnise
}

ssm-automation-execution() {

  # Show details for an SSM Automation Execution
  #
  #     USAGE: ssm-automation-execution execution [execution]
  #

  local automation_executions="$(skim-stdin "$@")"

  local automation_execution
  for automation_execution in $automation_executions; do
    aws ssm get-automation-execution \
      --automation-execution-id "$automation_execution" \
      --output text \
      --query "
        AutomationExecution.[
          AutomationExecutionId,
          DocumentName,
          Parameters.InstanceId,
          AutomationExecutionStatus,
          ExecutionStartTime,
          ExecutionEndTime
        ][]"
  done  \
  | LC_ALL=C sort -k 6 -t $'\t' \
  | columnise # XXX check this - was commented out
}



ssm-instances() {

  # List Instances known to SSM
  #
  #    USAGE: ssm-instances [filter]
  #
  #    $ ssm-instances
  #    i-00a123b456d789012  Online  Amazon Linux                              2           192.168.1.10    server001.example.com
  #    i-01b234c567e890123  Online  Microsoft Windows Server 2019 Datacenter  10.0.17763  192.168.1.20    winserver002.example.com
  #    i-02c345d678f901234  Online  Ubuntu                                    20.04       192.168.1.30    ubuntu003.example.com
  #    i-03d456e789a012345  Online  Ubuntu                                    20.04       192.168.1.40    ubuntu004.example.com
  #    i-04e567f89b1234567  Online  Amazon Linux                              2           192.168.1.50    server005.example.com

  #    *Optionally provide a filter string for a `| grep` effect with tighter columisation:*
  #
  #    $ ssm-instances Windows
  #    i-00a123b456d789012 Online  Microsoft Windows Server 2019 Datacenter  68.0.11111  192.168.1.10    server001.example.com
  #    i-01b234c567e890123 Online  Microsoft Windows Server 2022 Datacenter  68.0.11112  192.168.1.20    winserver002.example.com

  local instances=$(skim-stdin)
  local filters=$(__bma_read_filters $@)

  local arg_filters="${instances:+--filters Key=InstanceIds,Values="${instances// /,}"}"

  aws ssm describe-instance-information \
    --output text \
    $arg_filters \
    --query "
      InstanceInformationList[][
        InstanceId,
        PingStatus,
        PlatformName,
        PlatformVersion,
        IPAddress,
        ComputerName
      ]" |
    grep -E -- "$filters" |
    LC_ALL=C sort -t $'\t' -k 6 |
    columnise
}


ssm-instance-patch-states() {
  # List patch states of instances known to SSM
  #
  # USAGE: instance-ssm-patch-states [filter]
  #
  # Example:
  # $ instance-ssm-patch-states
  # InstanceId        PatchGroup   OperationEndTime           Installed  InstalledOther  InstalledPendingReboot  InstalledRejected
  # i-00a123b456d789012  PATCH_GROUP  2021-07-16T12:34:56Z       5          3               0                       0
  # i-01b234c567e890123  PATCH_GROUP  2021-07-16T12:35:12Z       5          3               0                       0
  #
  # Optionally provide a filter string for a `| grep` effect with tighter columnization:
  #
  # $ instance-ssm-patch-states Ubuntu
  # InstanceId        PatchGroup   OperationEndTime           Installed  InstalledOther  InstalledPendingReboot  InstalledRejected
  # i-02c345d678f901234  PATCH_GROUP  2021-07-16T12:36:30Z       5          2               1                       0

  local instances=$(skim-stdin)
  local filters=$(__bma_read_filters $@)

  local arg_filters=""
  if [[ -n "$instances" ]]; then
    arg_filters="--instance-ids $instances"
  fi

  # Print headers to stderr
  {

  echo -e "InstanceId\tPatchGroup\tOperationEndTime\tInstalled\tInstalledOther\tInstalledPendingReboot\tInstalledRejected"

  aws ssm describe-instance-patch-states \
    --output text \
    $arg_filters \
    --query "
      InstancePatchStates[][
        InstanceId,
        PatchGroup,
        OperationEndTime,
        InstalledCount,
        InstalledOtherCount,
        InstalledPendingRebootCount,
        InstalledRejectedCount
      ]" |
    grep -E -- "$filters" |
    LC_ALL=C sort -t $'\t' -k 3 
  } | columnise
}

alias instance-ssm-patch-states='ssm-instance-patch-states'

ssm-send-command() {

  # Run a command locally on EC2 instance(s) running Linux
  #
  #     USAGE: ssm-send-command COMMAND instance-id [instance-id]
  #
  #     $ ssm-send-command 'date +%F' i-0fict1234abcd
  #     Command ID: 12345abc-de67-f890-gh12-34ij56kl789m
  #     Waiting for command to complete...
  #     i-0fict1234abcd  2023-12-01
  #
  #     $ ssm-instances | grep Linux | ssm-send-command 'date +%F'
  #     Command ID: 98b7c6d2-e3f4-11ac-8d20-47a56db09c8f
  #     Waiting for command to complete...
  #     i-0fake1234a567bcd  2023-12-01
  #     i-0fake2345b678cde  2023-12-01
  #     i-0fake3456c789def  2023-11-30
  #     i-0fake4567d890efa  2023-11-30
  #     i-0fake5678e901fgh  2023-12-01
  #     i-0fake6789f012ghi  2023-12-01
  #
  #     See also: ssm-send-command-windows

  local command=$1
  shift
  local instances=$(skim-stdin "$@")
  echo >&2 "\$command=$command"
  echo >&2 "\$instances=$instances"
  if [[ -z $command ]] || [[ -z $instances ]]; then
    echo "Usage: $0 command instance-id [instance-id]" >&2
    return 1
  fi

  local ssm_target_platform="${ssm_target_platform:-Linux}"
  local document_name

  if [[ $ssm_target_platform = Linux ]]; then
    document_name='AWS-RunShellScript'
  elif [[ $ssm_target_platform = Windows ]]; then
    document_name='AWS-RunPowerShellScript'
  else
    echo >&2 "Invalid value (\$ssm_target_platform ${ssm_target_platform})"
    return 1
  fi

  if [[ $ssm_target_platform = Linux ]]; then

    # If the command is a file
    if [[ -f $command ]]; then
      # Compress and encode the script
      command=$(xz -c9 "$command" | base64)

      # Prepare the command to decode, decompress, and execute the script
      local temp_script="temp_script.sh"
      command="echo $command | base64 --decode | xz -cd > $temp_script; chmod +x $temp_script; trap 'rm -f $temp_script' EXIT; ./$temp_script"
    fi
  fi

  # Escape double quotes in command
  local escaped_command=$(echo $command | sed 's/"/\\"/g')

  # Send command
  local command_id
  if ! command_id=$(aws ssm send-command \
    --targets "Key=instanceids,Values=${instances// /,}" \
    --document-name "${document_name}" \
    --parameters "{\"commands\":[\"$escaped_command\"]}" \
    --query "Command.CommandId" \
    --output text); then
    return 1
  fi

  echo "Command ID: $command_id" >&2

  echo >&2 "Waiting for command to complete..."
  for instance in $instances; do

    # Wait for command to complete
    aws ssm wait command-executed \
      --command-id "$command_id" \
      --instance-id "$instance"

    # Fetch command result
    aws ssm list-command-invocations \
      --command-id "$command_id" \
      --instance-id "$instance" \
      --details \
      --query "CommandInvocations[0].CommandPlugins[0].['${instance}', Output]" \
      --output text
  done |
    columnise
}

ssm-send-command-windows() {

  # Run a command locally on EC2 instance(s) running Windows
  #
  #     USAGE: ssm-send-command-windows COMMAND instance-id [instance-id]
  #
  #     $ ssm-send-command 'Get-Hotfix' i-0fict1234abcd
  #     Command ID: 12345abc-de67-f890-gh12-34ij56kl789m
  #     Waiting for command to complete...
  #     i-0fict1234abcd  2023-12-01
  #
  #     $ ssm-instances Windows | ssm-send-command-windows Get-Hotfix
  #     Command ID: a0eeeddc-2edf-42bc-b0c7-122f5bc50956
  #     Waiting for command to complete...
  #     i-0fake1234abcd                                                                           
  #        Source        Description      HotFixID      InstalledBy          InstalledOn              
  #        ------        -----------      --------      -----------          -----------              
  #        FAKEAPP01234  Update           KB1234567     NT AUTHORITY\SYSTEM  10/11/2023 12:00:00 AM   
  #        FAKEAPP01234  Update           KB8901234     NT AUTHORITY\SYSTEM  12/12/2018 12:00:00 AM   
  #        FAKEAPP01234  Security Update  KB5678901     NT AUTHORITY\SYSTEM  12/12/2018 12:00:00 AM   
  #        FAKEAPP01234  Update           KB2345678     NT AUTHORITY\SYSTEM  1/9/2019 12:00:00 AM     
  #        FAKEAPP01234  Update           KB3456789     NT AUTHORITY\SYSTEM  3/11/2021 12:00:00 AM    
  #        FAKEAPP01234  Security Update  KB4567890     NT AUTHORITY\SYSTEM  4/21/2019 12:00:00 AM    
  #        FAKEAPP01234  Security Update  KB5678901     NT AUTHORITY\SYSTEM  5/15/2019 12:00:00 AM    
  #        FAKEAPP01234  Security Update  KB6789012     NT AUTHORITY\SYSTEM  6/12/2019 12:00:00 AM   
  #     ---Output truncated---                                                                        
  #     i-0fake1234abcd                                                                           
  #        Source        Description      HotFixID      InstalledBy          InstalledOn              
  #        ------        -----------      --------      -----------          -----------              
  #        FAKEAPP01234  Update           KB1234567     NT AUTHORITY\SYSTEM  10/11/2023 12:00:00 AM   
  #        FAKEAPP01234  Update           KB8901234     NT AUTHORITY\SYSTEM  12/12/2018 12:00:00 AM   
  #        FAKEAPP01234  Security Update  KB5678901     NT AUTHORITY\SYSTEM  12/12/2018 12:00:00 AM   
  #
  #     See also: ssm-send-command-windows
  local ssm_target_platform='Windows'
  ssm-send-command "$@"
}



ssm-automation-execution-failed() {
  local search="${@:-}"
  ssm-automation-executions Failed | grep 'i-' | grep "${search}" | xargs -I{} sh -c ' echo "{}" | cut -f 1,2,3,4 | tr "\n" "\t"; echo "{}" | bma ssm-automation-step-executions | rg --word-regexp Failed | cut -f 2,3,4,6,8'
}

# ssm-automation-execution-success() {
#   local search="${@:-}"
#   ssm-automation-executions Success | grep 'i-' | grep "${search}" 
# }

ssm-automation-step-executions() {

  # Show step-by-step details for an SSM Automation Execution
  #
  #     USAGE: automation-execution-steps execution_id [execution_id]
  #
  #     $ ssm-automation-executions | ssm-automation-steps-executions
  #     [Outputs detailed step information for each provided execution ID]
  
  local automation_executions="$(skim-stdin "$@")"

  local automation_execution
  for automation_execution in $automation_executions; do
    # echo "Details for Automation Execution ID: $automation_execution"
    aws ssm describe-automation-step-executions \
      --automation-execution-id "$automation_execution" \
      --output text \
      --query "
        StepExecutions[].[ 
          '$automation_execution',
          StepExecutionId,
          StepName,
          StepStatus,
          Action,
          Outputs.ExecutionId[0] || Outputs.CommandId[0],
          ExecutionStartTime,
          ExecutionEndTime
        ]"
  done  \
  | LC_ALL=C sort -k 6 -t $'\t' \
  | columnise
}



ssm-associations() {

  # List SSM associations
  #
  #     USAGE: ssm-associations [filter]
  #
  #     $ ssm-associations
  #     Task-RunSecurityScan                cron(30 2 * * SUN)    2023-01-15T02:30:00.000000+00:00  Failed
  #     Task-UpdateSystemPackages           cron(0 4 * * SAT)     2023-04-22T04:00:00.000000+00:00  Success
  #     Service-ConfigureNetworkSettings    rate(7 days)          2023-05-07T11:00:00.000000+00:00  Success
  #     Script-DeployMonitoringTools        cron(15 3 * * FRI)    2023-03-03T03:15:00.000000+00:00  Failed

  local filters=$(__bma_read_filters $@)

  aws ssm list-associations \
    --query 'Associations[].[
        AssociationId,
        AssociationName,
        Name,
        ScheduleExpression,
        LastExecutionDate,
        Overview.Status]' \
    --output text |
    grep -E -- "$filters" |
    columnise
}


ssm-parameters() {

  # List SSM Parameters
  #
  #    USAGE: ssm-parameters [filter]
  #
  #    $ ssm-parameters
  #    /company/ad/a1234567/username
  #    /ami/Ubuntu-20.04-proxy
  #    /cloudwatch-agent/config/general
  #    /cnf/staticSite/B1P2V34SR5KF0Z/encryptionKeyArn
  #    /ops/CloudMetrics/linux
  #    /ops/CloudMetrics/windows

  local filters=$(__bma_read_filters $@)
  aws ssm describe-parameters \
    --output text \
    --query 'Parameters[].[Name]' \
  | grep -E -- "$filters" \
  | LC_ALL=C sort
}

ssm-parameter-value() {

  # Print SSM Parameter Value
  #
  #    USAGE: ssm-parameter-value ssm-parameter [ssm-parameter]
  #
  #    $ ssm-parameters | ssm-parameter-value
  #    /ops/Monitoring/metrics/unix
  #    {
  #      "agent": {
  #        "metrics_collection_interval": 60,
  #        "logfile": "/var/log/aws-monitoring/aws-monitoring-agent.log"
  #      },
  #      "logs": {
  #        "logs_collected": {
  #          "files": {
  #    <snip>

  local parameters=$(skim-stdin "$@")
  local parameter
  for parameter in $parameters; do
    echo -e "\n${parameter}"
    aws ssm get-parameter \
      --name "$parameter" \
      --query Parameter.Value \
      --output json
  done
}

instance-ssm-platform-type() {

  # Show platform type (OS) for instance
  #
  #     USAGE: instance-ssm-platform-type instance-id [instance-id]
  #
  #     $ instances | instance-ssm-platform-type
  #     i-0c1d2e3f4a567890b     None
  #     i-0d1c2b3a4e5f6789c     Linux
  #     i-0e1f2d3c4b5a6789d     Linux
  #     i-0f1e2d3c4b5a6789e     None
  #     i-0a9f8e7d6c5b4a312     None
  #     i-01b2a3c4d5e6f7893     Windows

  local instance_ids=$(skim-stdin "$@")
  if [[ -z $instance_ids ]]; then
    echo "Usage: $FUNCNAME instance-id [instance-id]"
    return 1
  fi
  for instance_id in $instance_ids; do
    local platform_type=$(aws --no-cli-pager ssm describe-instance-information --filters "Key=InstanceIds,Values=${instance_id}" --query 'InstanceInformationList[0].PlatformType' --output text)
    echo -e "$instance_id\t$platform_type"
  done
}

instance-ssm-not-online() {
  local instances_ssm_online=$(bma ssm-instances | grep Online | cut -f1)
  instances | rg -vf <(echo "$instances_ssm_online")
}
