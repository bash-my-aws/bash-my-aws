#!/bin/bash
#
# region-functions

# There is often confusion around the two environment variables:
#
# - AWS_DEFAULT_REGION 
# - AWS_REGION
#
# AWS_REGION takes precedence in AWSCLI and some other tools

# Configuring environment variables for the AWS CLI
#
# https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html
#
# AWS_REGION
#
# The AWS SDK compatible environment variable that specifies the AWS Region to send the request to.
# 
# If defined, this environment variable overrides the values in the environment variable AWS_DEFAULT_REGION and the profile setting region. You can override this environment variable by using the --region command line parameter.
#
# AWS_DEFAULT_REGION
#
# The Default region name identifies the AWS Region whose servers you want to
# send your requests to by default. This is typically the Region closest to
# you, but it can be any Region. For example, you can type us-west-2 to use US
# West (Oregon). This is the Region that all later requests are sent to, unless
# you specify otherwise in an individual command.
# 
# Note: You must specify an AWS Region when using the AWS CLI, either explicitly
# or by setting a default Region. For a list of the available Regions, see
# Regions and Endpoints. The Region designators used by the AWS CLI are the
# same names that you see in AWS Management Console URLs and service endpoints.
# 
# If defined, this environment variable overrides the value for the profile
# setting region. You can override this environment variable by using the
# --region command line parameter and the AWS SDK compatible AWS_REGION
# environment variable.

regions() {

  # List regions
  #
  # The region() function must be sourced in order to update the
  # AWS_DEFAULT_REGION environment variable. This is because it
  # cannot update an environment variable when run as a subprocess.
  #
  #     $ regions
  #     ap-northeast-1
  #     ap-northeast-2
  #     ap-south-1
  #     ap-southeast-1
  #     ap-southeast-2
  #     ...
  #     us-west-2

  aws ec2 describe-regions           \
    --query "Regions[].[RegionName]" \
    --output text                    |
  LC_ALL=C sort
}


region() {

  # Get/Set `$AWS_DEFAULT_REGION` shell environment variable
  #
  #     $ region
  #     us-east-1
  #
  #     $ region ap-southeast-2
  #
  #     $ region
  #     ap-southeast-2

  local inputs=$(skim-stdin "$@")
  # XXX Check input is a valid region
  if [[ -z "$inputs" ]]; then
    echo "${AWS_DEFAULT_REGION:-'AWS_DEFAULT_REGION not set'}"
  else
    export AWS_DEFAULT_REGION="$inputs"
    # Update AWS_REGION only if already set.
    if [[ -n $AWS_REGION ]];  then
        export AWS_REGION="$AWS_DEFAULT_REGION"
    fi
  fi
}

region-each() {

  # Run a command in every region.
  # Any output lines will be appended with "#${REGION}".
  #
  #     $ region-each stacks
  #     example-ec2-ap-northeast-1  CREATE_COMPLETE  2011-05-23T15:47:44Z  NEVER_UPDATED  NOT_NESTED  #ap-northeast-1
  #     example-ec2-ap-northeast-2  CREATE_COMPLETE  2011-05-23T15:47:44Z  NEVER_UPDATED  NOT_NESTED  #ap-northeast-2
  #     ...
  #     example-ec2-us-west-2       CREATE_COMPLETE  2011-05-23T15:47:44Z  NEVER_UPDATED  NOT_NESTED  #us-west-2

  local region
  for region in $(regions); do
    (
      export AWS_DEFAULT_REGION="${region}"
      export AWS_REGION="${region}"
      eval "$@" | sed "s/$/ #${region}/"
    )
  done
}

