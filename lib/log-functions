#!/bin/bash
#
# log-functions
#
# CloudWatch Logs

log-groups() {

  # List CloudWatch Log Groups
  #
  #     $ log-groups
  #     /aws/lambda/stars2  1576495961429  0   11736
  #     /aws/lambda/stars   1576566745961  0  107460
  #     /aws/lambda/walk    1576567300172  0   11794

  local log_group_names=$(skim-stdin)
  local filters=$(__bma_read_filters $@)

  local column_command
  if column --help 2>/dev/null| grep -- --table-right > /dev/null; then
    column_command='column --table --table-right 3,4'
  else
    column_command='column -t'
  fi

  aws logs describe-log-groups    \
    --output text                 \
    --query "
      logGroups[${log_group_names:+?contains(['${log_group_names// /"','"}'], logGroupName)}].[
        logGroupName,
        creationTime,
        metricFilterCount,
        storedBytes
      ]"                |
  grep -E -- "$filters" |
  LC_ALL=C sort --key 2 |
  $column_command
}

log-group-delete() {

  # Delete CloudWatch Log Group
  #
  #     $ log-group-delete /aws/lambda/stars
  #     You are about to delete the following log groups?
  #     /aws/lambda/stars
  #     Are you sure? [y/N] y
  #     Deleting: /aws/lambda/stars
  #     Deleted: /aws/lambda/stars
  #     
  #     You can also pipe the log group names to this command
  #     $ log-groups | log-group-delete

  local log_groups=$(skim-stdin "$@")
  local log_group_name

  [[ -z $log_groups ]] && return 1
  [ -t 0 ] || exec 0< /dev/tty
  local regex_yes='^[yY]$'
  echo "You are about to delete the following log groups?"
  echo "$log_groups" | tr ' ' '\n' 
  read -p "Are you sure? [y/N] " -n 1 -r
  [[ $REPLY =~ $regex_yes ]] || return 0

  for log_group_name in $log_groups; do
    echo "Deleting: $log_group_name"
    aws logs delete-log-group --log-group-name "$log_group_name"
    echo "Deleted: $log_group_name"
  done
}
