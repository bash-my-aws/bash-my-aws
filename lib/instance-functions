#!/bin/bash
#
# instance-functions
#
# List, run, start, stop and ssh to Amazon AWS EC2 instances

instances() {

  # List EC2 Instances
  #
  #     $ instances
  #     i-4e15ece1de1a3f869  ami-123456789012  t3.nano  running  nagios          2019-12-10T08:17:18.000Z  ap-southeast-2a  None
  #     i-89cefa9403373d7a5  ami-123456789012  t3.nano  running  postgres1       2019-12-10T08:17:20.000Z  ap-southeast-2a  None
  #     i-806d8f1592e2a2efd  ami-123456789012  t3.nano  running  postgres2       2019-12-10T08:17:22.000Z  ap-southeast-2a  None
  #     i-61e86ac6be1e2c193  ami-123456789012  t3.nano  running  prometheus-web  2019-12-10T08:17:24.000Z  ap-southeast-2a  None
  #
  # *Optionally provide a filter string for a `| grep` effect with tighter columisation:*
  #
  #     $ instances postgres
  #     i-89cefa9403373d7a5  ami-123456789012  t3.nano  running  postgres1  2019-12-10T08:17:20.000Z  ap-southeast-2a  None
  #     i-806d8f1592e2a2efd  ami-123456789012  t3.nano  running  postgres2  2019-12-10T08:17:22.000Z  ap-southeast-2a  None

  local instance_ids=$(skim-stdin)
  local filters=$(__bma_read_filters $@)

  aws ec2 describe-instances            \
    ${instance_ids/#/'--instance-ids '} \
    --output text                       \
    --query "
      Reservations[].Instances[][
        InstanceId,
        ImageId,
        InstanceType,
        State.Name,
        [Tags[?Key=='Name'].Value][0][0],
        LaunchTime,
        Placement.AvailabilityZone,
        VpcId
      ]"                |
  grep -E -- "$filters" |
  LC_ALL=C sort -b -k 6 |
  column -s$'\t' -t
}

instance-change-type() {

  # Change an instance type
  #
  #     USAGE: instance-change-type instance-type instance-id [instance-id]

  [[ $# != 2 ]] && __bma_usage "instance-change-type  instance-type instance-id [instance-id]" && return 1
  local type=$1
  shift
  local instance_ids=$(skim-stdin "$@")
  local regex_yes="^[Yy]$"

  read -p "Are you sure you want to change these instances to $type? " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    for id in $instance_ids; do
      aws ec2 modify-instance-attribute \
        --instance-type $type            \
        --instance-id $id
    done
  fi
}

instance-asg() {

  # List autoscaling group membership of EC2 Instance(s)
  #
  #     USAGE: instance-asg instance-id [instance-id]

  local instance_ids=$(skim-stdin "$@")
  [[ -z $instance_ids ]] && __bma_usage "instance-id [instance-id]" && return 1

  aws ec2 describe-instances      \
    --instance-ids $instance_ids  \
    --output text                 \
    --query "
      Reservations[].Instances[][
        {
          "AutoscalingGroupName":
            [Tags[?Key=='aws:autoscaling:groupName'].Value][0][0],
          "InstanceId": InstanceId
        }
      ][]"          |
  column -s$'\t' -t
}


instance-az() {

  # List availability zone of EC2 Instance(s)
  #
  #     USAGE: instance-az instance-id [instance-id]
  #
  #     $ instances postgres | instance-az
  #     i-89cefa9403373d7a5  ap-southeast-2a
  #     i-806d8f1592e2a2efd  ap-southeast-2a

  local instance_ids=$(skim-stdin "$@")
  [[ -z $instance_ids ]] && __bma_usage "instance-id [instance-id]" && return 1

  aws ec2 describe-instances      \
    --instance-ids $instance_ids  \
    --output text                 \
    --query "
      Reservations[].Instances[][
        [
          InstanceId,
          Placement.AvailabilityZone
        ]
      ][]"          |
  column -s$'\t' -t
}


instance-console() {

  # List console output of EC2 Instance(s)
  #
  #     USAGE: instance-console instance-id [instance-id]
  #
  #     $ instances postgres | instance-console
  #     Console output for EC2 Instance i-89cefa9403373d7a5
  #     Linux version 2.6.16-xenU (builder@patchbat.amazonsa) (gcc version 4.0.1 20050727 (Red Hat 4.0.1-5)) #1 SMP Thu Oct 26 08:41:26 SAST 2006
  #     BIOS-provided physical RAM map:
  #     Xen: 0000000000000000 - 000000006a400000 (usable)
  #     ...snip...
  #
  #     Console output for EC2 Instance i-806d8f1592e2a2efd
  #     Linux version 2.6.16-xenU (builder@patchbat.amazonsa) (gcc version 4.0.1 20050727 (Red Hat 4.0.1-5)) #1 SMP Thu Oct 26 08:41:26 SAST 2006
  #     BIOS-provided physical RAM map:
  #     Xen: 0000000000000000 - 000000006a400000 (usable)
  #     ...snip...

  local instance_ids=$(skim-stdin "$@")
  [[ -z $instance_ids ]] && __bma_usage "instance-id [instance-id]" && return 1

  local instance_id
  for instance_id in $instance_ids; do
    echo
    echo "Console output for EC2 Instance $instance_id"
    aws ec2 get-console-output     \
      --instance-id "$instance_id" \
      --output text                \
      --query Output
  done
}


instance-dns() {

  # List DNS name of EC2 Instance(s)
  #
  #     USAGE: instance-dns instance-id [instance-id]
  #
  #     $ instances postgres | instance-dns
  #     i-89cefa9403373d7a5  ip-10-155-35-61.ap-southeast-2.compute.internal   ec2-54-214-206-114.ap-southeast-2.compute.amazonaws.com
  #     i-806d8f1592e2a2efd  ip-10-178-243-63.ap-southeast-2.compute.internal  ec2-54-214-244-90.ap-southeast-2.compute.amazonaws.com

  local instance_ids=$(skim-stdin "$@")
  [[ -z $instance_ids ]] && __bma_usage "instance-id [instance-id]" && return 1

  aws ec2 describe-instances         \
    --instance-ids $instance_ids     \
    --output text                    \
    --query "
      Reservations[].Instances[][
        {
          "InstanceId": InstanceId,
          "Private": PrivateDnsName,
          "Public": PublicDnsName
        }
      ][]"          |
  column -s$'\t' -t
}


instance-health-set-unhealthy() {

  # Mark EC2 Instance(s) as unhealthy (to trigger replacement by ASG)
  #
  #     USAGE: instance-health-set-unhealthy instance-id [instance-id]

  local instance_ids=$(skim-stdin "$@")
  [[ -z $instance_ids ]] && __bma_usage "instance-id [instance-id]" && return 1

  local health_status=Unhealthy

  local instance
  for instance_id in $instance_ids; do
    aws autoscaling set-instance-health \
      --instance-id "$instance_id"      \
      --health-status "$health_status"
  done
}


instance-iam-profile() {

  # List iam-profile of EC2 Instance(s)
  #
  #     USAGE: instance-iam-profile instance-id [instance-id]

  local instance_ids=$(skim-stdin "$@")
  [[ -z $instance_ids ]] && __bma_usage "instance-id [instance-id]" && return 1

  aws ec2 describe-instances      \
    --instance-ids $instance_ids  \
    --output text                 \
    --query "
      Reservations[].Instances[][
        [
          InstanceId,
          IamInstanceProfile.Id
        ]
      ][]"          |
  column -s$'\t' -t
}


instance-ip() {

  # List ip address of EC2 Instance(s)
  #
  #     USAGE: instance-ip instance-id [instance-id]
  #
  #     $ instances postgres | instance-ip
  #     i-89cefa9403373d7a5  10.155.35.61   54.214.206.114
  #     i-806d8f1592e2a2efd  10.178.243.63  54.214.244.90

  local instance_ids=$(skim-stdin "$@")
  [[ -z $instance_ids ]] && __bma_usage "instance-id [instance-id]" && return 1

  aws ec2 describe-instances           \
    --instance-ids $instance_ids       \
    --output text                      \
    --query "
      Reservations[].Instances[][
        {
          "InstanceId": InstanceId,
          "Private": PrivateIpAddress,
          "Public": PublicIpAddress
        }
      ][]"          |
  column -s$'\t' -t
}


instance-ssh() {

  # Establish SSH connection to EC2 Instance(s)
  #
  #     USAGE: instance-ssh [login] [instance-id] [instance-id]

  if [[ $1 != *i-* ]]; then
    local user=${1}
    shift
  fi
  local instance_ids=$(skim-stdin "$@")
  if [[ -z $instance_ids ]] ; then
    echo "Usage: $FUNCNAME [login] [instance-id] [instance-id]"
    return 1
  fi

  exec </dev/tty # reattach keyboard to STDIN

  for instance_id in $instance_ids; do
    local instance_details="$(instance-ssh-details $instance_id)"
    local instance_id=$(echo $instance_details | awk '{print $1}')
    local keyname=$(echo $instance_details | awk '{print $2}')
    local private_ip=$(echo $instance_details | awk '{print $3}')
    local instance_name=$(echo $instance_details | awk '{print $4}')
    local instance_default_user=$(echo $instance_details | awk '{print $5}')

    local USERNAME=${user:-${instance_default_user:-${AWS_DEFAULT_USER:-root}}}
    echo "Connecting to EC2 Instance $instance_id '$instance_name'" 2>&1

    ssh                                    \
      -t                                   \
      -i "${BMA_SSH_DIR:-~/.ssh/}$keyname" \
      -o LogLevel=error                    \
      -o StrictHostKeyChecking=no          \
      -o UserKnownHostsFile=/dev/null      \
      -l "$USERNAME"                       \
      "$private_ip"
  done
}


instance-ssh-details() {

  # List details needed to SSH into EC2 Instance(s)
  #
  #     USAGE: instance-ssh-details [login] [instance-id] [instance-id]

  if [[ $1 != *i-* ]]; then
    local user=${1}
    shift
  fi
  local instance_ids=$(skim-stdin "$@")
  [[ -z "${instance_ids}" ]] && __bma_usage "instance_id" && return 1

  aws ec2 describe-instances                                      \
    --instance-ids $instance_ids                                  \
    --output text                                                 \
    --query "
      Reservations[].Instances[][
        InstanceId,
        KeyName,
        (PublicIpAddress || PrivateIpAddress),
        join(' ', [Tags[?Key=='Name'].Value][] || ['not-named']),
        join(' ', [Tags[?Key=='default-user'].Value][] || [''])
      ]"            |
  column -s$'\t' -t
}


instance-ssm() {

  # Establish SSM connection to EC2 Instance(s)
  #
  #     USAGE: instance-ssm instance-id [instance-id]

  local instance_ids=$(skim-stdin "$@")
  if [[ -z $instance_ids ]] ; then
    echo "Usage: $FUNCNAME instance-id [instance-id]"
    return 1
  fi

  exec </dev/tty # reattach keyboard to STDIN

  for instance_id in $instance_ids; do
    aws ssm start-session --target $instance_id
  done
}


instance-stack() {

  # List CloudFormation stack EC2 Instance(s) belong to (if any)
  #
  #     USAGE: instance-stack instance-id [instance-id]
  #
  #     $ instances postgres | instance-stack
  #     postgres1  i-89cefa9403373d7a5
  #     postgres2  i-806d8f1592e2a2efd

  local instance_ids=$(skim-stdin "$@")
  [[ -z $instance_ids ]] && __bma_usage "instance-id [instance-id]" && return 1

  aws ec2 describe-instances                                         \
    --instance-ids $instance_ids                                     \
    --output text                                                    \
    --query "
      Reservations[].Instances[][
        [
          [Tags[?Key=='aws:cloudformation:stack-name'].Value][0][0],
          InstanceId
        ]
      ][]"          |
  column -s$'\t' -t
}


instance-start() {

  # Start stopped EC2 Instance(s)
  #
  #     USAGE: instance-start instance-id [instance-id]
  #
  #     $ instances postgres | instance-start
  #     i-a8b8dd6783e1a40cc  PreviousState=stopped  CurrentState=pending
  #     i-5d74753e210bfe04d  PreviousState=stopped  CurrentState=pending

  local instance_ids=$(skim-stdin "$@")
  [[ -z $instance_ids ]] && __bma_usage "instance-id [instance-id]" && return 1

  aws ec2 start-instances        \
    --instance-ids $instance_ids \
    --output text                \
    --query "
      StartingInstances[].[
        InstanceId,
        join('=', ['PreviousState', PreviousState.Name]),
        join('=', ['CurrentState', CurrentState.Name])]
    " |
    column -t
}


instance-state() {

  # List state of EC2 Instance(s)
  #
  #     USAGE: instance-state instance-id [instance-id]
  #
  #     $ instances postgres | instance-state
  #     i-89cefa9403373d7a5  running
  #     i-806d8f1592e2a2efd  running

  local instance_ids=$(skim-stdin "$@")
  [[ -z $instance_ids ]] && __bma_usage "instance-id [instance-id]" && return 1

  aws ec2 describe-instances        \
    --instance-ids $instance_ids    \
    --output text                   \
    --query "
      Reservations[].Instances[][
        {
          "InstanceId": InstanceId,
          "State": State.Name
        }
      ][]"          |
  column -s$'\t' -t
}


instance-stop() {

  # Stop EC2 Instance(s)
  #
  #     USAGE: instance-stop instance-id [instance-id]
  #
  #     $ instances postgres | instance-stop
  #
  #     i-a8b8dd6783e1a40cc  PreviousState=running  CurrentState=stopping
  #     i-5d74753e210bfe04d  PreviousState=running  CurrentState=stopping

  local instance_ids=$(skim-stdin "$@")
  [[ -z $instance_ids ]] && __bma_usage "instance-id [instance-id]" && return 1

  aws ec2 stop-instances         \
    --instance-ids $instance_ids \
    --output text                \
    --query "
      StoppingInstances[].[
        InstanceId,
        join('=', ['PreviousState', PreviousState.Name]),
        join('=', ['CurrentState', CurrentState.Name])]
    " |
    column -t
}


instance-tags() {

  # List tags applied EC2 Instance(s)
  #
  #     USAGE: instance-tags instance-id [instance-id]

  local instance_ids=$(skim-stdin "$@")
  [[ -z $instance_ids ]] && __bma_usage "instance-id [instance-id]" && return 1

  aws ec2 describe-instances                            \
    --instance-ids $instance_ids                        \
    --output text                                       \
    --query "
      Reservations[].Instances[].[
        InstanceId,
        join(' ', [Tags[].[join('=',[Key,Value])][]][])
      ]"            |
  column -s$'\t' -t
}


instance-terminate() {

  # Terminate EC2 Instance(s)
  #
  #     USAGE: instance-terminate instance-id [instance-id]
  #
  #     $ instances | head -3 | instance-terminate
  #     You are about to terminate the following instances:
  #     i-01c7edb986c18c16a  ami-0119aa4d67e59007c  t3.nano  terminated  asg2  2019-12-13T03:37:51.000Z  ap-southeast-2c  None
  #     i-012dded46894dfa04  ami-0119aa4d67e59007c  t3.nano  running     ec2   2019-12-13T10:12:55.000Z  ap-southeast-2b  vpc-deb8edb9
  #     Are you sure you want to continue? y
  #     i-06ee900565652ecc5  PreviousState=terminated  CurrentState=terminated
  #     i-01c7edb986c18c16a  PreviousState=terminated  CurrentState=terminated
  #     i-012dded46894dfa04  PreviousState=running     CurrentState=shutting-down

  local instance_ids=$(skim-stdin "$@")
  [[ -z $instance_ids ]] && __bma_usage "instance-id [instance-id]" && return 1

  echo "You are about to terminate the following instances:"
  echo "$instance_ids" | tr ' ' "\n" | instances
  [ -t 0 ] || exec </dev/tty # reattach keyboard to STDIN
  local regex_yes="^[Yy]$"
  read -p "Are you sure you want to continue? " -n 1 -r
  echo
  if [[ $REPLY =~ $regex_yes ]]
  then
    aws ec2 terminate-instances    \
      --instance-ids $instance_ids \
      --output text                \
      --query "
        TerminatingInstances[].[
          InstanceId,
          join('=', ['PreviousState', PreviousState.Name]),
          join('=', ['CurrentState', CurrentState.Name])]
      " |
      column -t
  fi
}


instance-termination-protection() {

  # List current state of Termination Protection for EC2 Instance(s)
  #
  #     USAGE: instance-termination-protection instance-id [instance-id]
  #
  #     $ instances | instance-termination-protection
  #     i-4e15ece1de1a3f869 DisableApiTermination=true
  #     i-89cefa9403373d7a5 DisableApiTermination=false
  #     i-806d8f1592e2a2efd DisableApiTermination=false
  #     i-61e86ac6be1e2c193 DisableApiTermination=false

  local instance_ids=$(skim-stdin "$@")
  [[ -z $instance_ids ]] && __bma_usage "instance-id [instance-id]" && return 1

  for instance_id in $instance_ids; do
    aws ec2 describe-instance-attribute \
      --attribute disableApiTermination \
      --instance-id "$instance_id"      \
      --output text                     \
      --query "[
        InstanceId,
        join('=', [
          'DisableApiTermination',
          to_string(DisableApiTermination.Value)
        ])
      ]"
  done
}


instance-termination-protection-disable() {

  # Disable EC2 Instance termination protection
  #
  #     USAGE: instance-termination-protection-disable instance-id [instance-id]

  local instance_ids=$(skim-stdin "$@")
  [[ -z $instance_ids ]] && __bma_usage "instance-id [instance-id]" && return 1

  echo "You are about to disable termination protection on the following instances:"
  echo "$instance_ids" | tr ' ' "\n" | instances
  [ -t 0 ] || exec </dev/tty # reattach keyboard to STDIN
  local regex_yes="^[Yy]$"
  read -p "Are you sure you want to continue? " -n 1 -r
  echo
  if [[ $REPLY =~ $regex_yes ]]
  then
    for instance_id in $instance_ids; do
      aws ec2 modify-instance-attribute   \
        --attribute disableApiTermination \
        --value false                     \
        --instance-id "$instance_id"
    done
  fi
}


instance-termination-protection-enable() {

  # Enable EC2 Instance termination protection
  #
  #     USAGE: instance-termination-protection-enable instance-id [instance-id]

  local instance_ids=$(skim-stdin "$@")
  [[ -z $instance_ids ]] && __bma_usage "instance-id [instance-id]" && return 1

  echo "You are about to enable termination protection on the following instances:"
  echo "$instance_ids" | tr ' ' "\n" | instances
  [ -t 0 ] || exec </dev/tty # reattach keyboard to STDIN
  local regex_yes="^[Yy]$"
  read -p "Are you sure you want to continue? " -n 1 -r
  echo
  if [[ $REPLY =~ $regex_yes ]]
  then
    for instance_id in $instance_ids; do
      aws ec2 modify-instance-attribute   \
        --attribute disableApiTermination \
        --value true                      \
        --instance-id "$instance_id"
    done
  fi
}


instance-type() {

  # List type of instance(s)
  #
  #     USAGE: instance-type instance-id [instance-id]
  #
  #     $ instances | instance-type
  #     i-4e15ece1de1a3f869  t3.nano
  #     i-89cefa9403373d7a5  t3.nano
  #     i-806d8f1592e2a2efd  t3.nano
  #     i-61e86ac6be1e2c193  t3.nano

  local instance_ids=$(skim-stdin "$@")
  [[ -z $instance_ids ]] && __bma_usage "instance-id [instance-id]" && return 1

  aws ec2 describe-instances                                            \
    $([[ -n $instance_ids ]] && echo --instance-ids ${instance_ids})  \
    --query "
      Reservations[].Instances[][
        [
          InstanceId,
          InstanceType
        ]
      ][]"                                                              \
    --output text                                                       |
  column -s$'\t' -t
}


instance-userdata() {

  # List userdata for instance(s)
  #
  #     USAGE: instance-userdata instance-id [instance-id]

  local instance_ids=$(skim-stdin "$@")
  [[ -z $instance_ids ]] && __bma_usage "instance-id [instance-id]" && return 1
  local instance_id
  for instance_id in $instance_ids; do
    echo Userdata for EC2 Instance $instance_id
    aws ec2 describe-instance-attribute \
      --attribute userData              \
      --instance-id "$instance_id"      \
      --query UserData                  \
      --output text    |
    base64 --decode
    echo
  done
}


instance-volumes() {

  # List volumes of instance(s)
  #
  #     USAGE: instance-volumes instance-id [instance-id]
  #
  #     $ instances postgres | instance-volumes
  #     i-89cefa9403373d7a5  vol-cf5ddae9
  #     i-806d8f1592e2a2efd  vol-38fd45c3

  local instance_ids=$(skim-stdin "$@")
  [[ -z $instance_ids ]] && __bma_usage "instance-id [instance-id]" && return 1

  aws ec2 describe-instances                                            \
    $([[ -n $instance_ids ]] && echo --instance-ids ${instance_ids})  \
    --query "
      Reservations[].Instances[][
        [
          InstanceId,
          join(' ', BlockDeviceMappings[].Ebs[].VolumeId)
        ]
      ][]"                                                              \
    --output text                                                       |
  column -s$'\t' -t
}


instance-vpc() {

  # List VPC of instance(s)
  #
  #     USAGE: instance-vpcs instance-id [instance-id]

  local instance_ids=$(skim-stdin "$@")
  [[ -z $instance_ids ]] && __bma_usage "instance-id [instance-id]" && return 1

  aws ec2 describe-instances     \
    --instance-ids $instance_ids \
    --output text                \
    --query "
      Reservations[].Instances[][
        [
          VpcId,
          InstanceId
        ]
      ][]"          |
  column -s$'\t' -t
}

# vim: ft=sh
