#!/bin/bash
#
# instance-functions
#
# List, run, start, stop and ssh to Amazon AWS EC2 instances

instances() {
  local instance_ids=$(__bma_read_inputs)
  local filters=$(__bma_read_filters $@)

  aws ec2 describe-instances                                            \
    $([[ -n ${instance_ids} ]] && echo --instance-ids ${instance_ids})  \
    --query "
      Reservations[].Instances[][
        InstanceId,
        ImageId,
        InstanceType,
        State.Name,
        [Tags[?Key=='Name'].Value][0][0],
        LaunchTime,
        Placement.AvailabilityZone,
        VpcId
      ]"                                                               \
    --output text                      |
  grep -E -- "$filters"                |
  sort --ignore-leading-blanks --key=6 |
  column -s$'\t' -t
}

instance-asg() {
  # returns the autoscaling group instance is member of
  local instance_ids="$(__bma_read_inputs $@)"
  [[ -z "$instance_ids" ]] && __bma_usage "instance-id [instance-id]" && return 1

  aws ec2 describe-instances                                            \
    $([[ -n ${instance_ids} ]] && echo --instance-ids ${instance_ids})  \
    --query "
      Reservations[].Instances[][
        {
          "AutoscalingGroupName": 
            [Tags[?Key=='aws:autoscaling:groupName'].Value][0][0],
          "InstanceId": InstanceId
        }
      ][]"                                                              \
    --output text                                                       |
  column -s$'\t' -t
}

instance-az() {
  # returns the availability zone of an instance
  local instance_ids="$(__bma_read_inputs $@)"
  [[ -z "$instance_ids" ]] && __bma_usage "instance-id [instance-id]" && return 1
  
  aws ec2 describe-instances                                            \
    $([[ -n ${instance_ids} ]] && echo --instance-ids ${instance_ids})  \
    --query "
      Reservations[].Instances[][
        [
          InstanceId,
          Placement.AvailabilityZone
        ]
      ][]"                                                              \
    --output text                                                       |
  column -s$'\t' -t
}

instance-console() {
  # return console output of instance
  local instance_ids=$(__bma_read_inputs $@)
  [[ -z "$instance_ids" ]] && __bma_usage "instance-id [instance-id]" && return 1
  local instance_id
  for instance_id in $instance_ids; do
    echo Console output for EC2 Instance $instance_id
    aws ec2 get-console-output     \
      --instance-id "$instance_id" \
      --query Output               \
      --output text
    echo
  done
}

instance-dns() {
  # returns the dns name of an instance
  local instance_ids="$(__bma_read_inputs $@)"
  [[ -z "$instance_ids" ]] && __bma_usage "instance-id [instance-id]" && return 1
  
  aws ec2 describe-instances                                            \
    $([[ -n ${instance_ids} ]] && echo --instance-ids ${instance_ids})  \
    --query "
      Reservations[].Instances[][
        {
          "InstanceId": InstanceId,
          "Private": PrivateDnsName,
          "Public": PublicDnsName
        }
      ][]"                                                              \
    --output text                                                       |
  column -s$'\t' -t
}

instance-iam-profile() {
  # returns the iam-profile of an instance
  local instance_ids="$(__bma_read_inputs $@)"
  [[ -z "$instance_ids" ]] && __bma_usage "instance-id [instance-id]" && return 1
  
  aws ec2 describe-instances                                            \
    $([[ -n ${instance_ids} ]] && echo --instance-ids ${instance_ids})  \
    --query "
      Reservations[].Instances[][
        [
          InstanceId,
          IamInstanceProfile.Id
        ]
      ][]"                                                              \
    --output text                                                       |
  column -s$'\t' -t
}

instance-ip() {
  # returns the ip address of an instance
  local instance_ids="$(__bma_read_inputs $@)"
  [[ -z "$instance_ids" ]] && __bma_usage "instance-id [instance-id]" && return 1
  
  aws ec2 describe-instances                                            \
    $([[ -n ${instance_ids} ]] && echo --instance-ids ${instance_ids})  \
    --query "
      Reservations[].Instances[][
        {
          "InstanceId": InstanceId,
          "Private": PrivateIpAddress,
          "Public": PublicIpAddress
        }
      ][]"                                                              \
    --output text                                                       |
  column -s$'\t' -t
}

instance-ssh() {
  # connects to an instance via SSH

  local inputs="$(__bma_read_inputs $@)"
  local instance_ids=$(echo "$inputs" | tr " " "\n" | grep "^i-" | tr "\n" " ")
  local user=$(echo "$inputs" | tr " " "\n" | grep -v "^i-" | tr "\n" " ")
  if [ -z "$instance_ids" ] ; then echo "Usage: $FUNCNAME [login] [instance-id] [instance-id]"; return 1; fi

  exec </dev/tty # reattach keyboard to STDIN

  for instance_id in $instance_ids; do
    local instance_details="$(instance-ssh-details $instance_id)"
    local instance_id=$(echo $instance_details | awk '{print $1}');
    local keyname=$(echo $instance_details | awk '{print $2}');
    local private_ip=$(echo $instance_details | awk '{print $3}');
    local instance_name=$(echo $instance_details | awk '{print $4}');
    local instance_default_user=$(echo $instance_details | awk '{print $5}');

    local USERNAME=${user:-${instance_default_user:-${AWS_DEFAULT_USER:-root}}}
    echo "Connecting to EC2 Instance $instance_id '$instance_name'" 2>&1

    ssh                                  \
      -t                                \
      -i ${BMA_SSH_DIR:-~/.ssh/}$keyname \
      -o LogLevel=error                  \
      -o StrictHostKeyChecking=no        \
      -o UserKnownHostsFile=/dev/null    \
      -l $USERNAME                       \
      $private_ip
  done
}

instance-ssh-details() {
  # returns the details needed to SSH into an instance
  local instance_ids="$(__bma_read_inputs $@)"
  [[ -z "${instance_ids}" ]] && __bma_usage "instance_id" && return 1

  aws ec2 describe-instances                                            \
    $([[ -n ${instance_ids} ]] && echo --instance-ids ${instance_ids})  \
    --query "
      Reservations[].Instances[][
        InstanceId,
        KeyName,
        (PublicIpAddress || PrivateIpAddress),
        join(' ', [Tags[?Key=='Name'].Value][] || ['not-named']),
        join(' ', [Tags[?Key=='default-user'].Value][] || [''])
      ]"                                                                \
    --output text                                                       |
  column -s$'\t' -t
}

instance-stack() {
  # returns the stack an instances is a member of
  local instance_ids="$(__bma_read_inputs $@)"
  [[ -z "$instance_ids" ]] && __bma_usage "instance-id [instance-id]" && return 1

  aws ec2 describe-instances                                            \
    $([[ -n ${instance_ids} ]] && echo --instance-ids ${instance_ids})  \
    --query "
      Reservations[].Instances[][
        [
          [Tags[?Key=='aws:cloudformation:stack-name'].Value][0][0],
          InstanceId
        ]
      ][]"                                                                \
    --output text                                                       |
  column -s$'\t' -t
}

instance-start() {
  # starts a stopped instance
  local instance_ids="$(__bma_read_inputs $@)"
  [[ -z "$instance_ids" ]] && __bma_usage "instance-id [instance-id]" && return 1

  aws ec2 start-instances --instance-ids $instance_ids
}

instance-state() {
  # returns the state of an instance
  local instance_ids="$(__bma_read_inputs $@)"
  [[ -z "$instance_ids" ]] && __bma_usage "instance-id [instance-id]" && return 1
  
  aws ec2 describe-instances                                            \
    $([[ -n ${instance_ids} ]] && echo --instance-ids ${instance_ids})  \
    --query "
      Reservations[].Instances[][
        {
          "InstanceId": InstanceId,
          "State": State.Name
        }
      ][]"                                                              \
    --output text                                                       |
  column -s$'\t' -t
}

instance-stop() {
  # stops a running instance
  local instance_ids="$(__bma_read_inputs $@)"
  [[ -z "$instance_ids" ]] && __bma_usage "instance-id [instance-id]" && return 1

  aws ec2 stop-instances --instance-ids $instance_ids
}

# Replaces two older functions
#
# instances_with_tag() # instance_tags | grep expiry=
# instances_without_tag() # instance_tags | grep -v expiry=
#
instance-tags() {
  # returns the tags applied instances
  local instance_ids="$(__bma_read_inputs $@)"
  [[ -z "$instance_ids" ]] && __bma_usage "instance-id [instance-id]" && return 1
  
  aws ec2 describe-instances                                            \
    $([[ -n ${instance_ids} ]] && echo --instance-ids ${instance_ids})  \
    --query "
      Reservations[].Instances[].[
        InstanceId,
        join(' ', [Tags[].[join('=',[Key,Value])][]][])
      ]"                                                                \
    --output text                                                       |
  column -s$'\t' -t
}

instance-terminate() {
  local instance_ids="$(__bma_read_inputs $@)"
  [[ -z "$instance_ids" ]] && __bma_usage "instance-id [instance-id]" && return 1

  echo "You are about to terminate the following instances:"
  instances "$instance_ids"
  [ -t 0 ] || exec </dev/tty # reattach keyboard to STDIN
  local regex_yes="^[Yy]$"
  printf "Are you sure you want to continue? "
  __bma_read_char_stdin REPLY
  echo
  if [[ $REPLY =~ $regex_yes ]]
  then
    aws ec2 terminate-instances --instance-ids $instance_ids
  fi
}

instance-termination-protection() {
  local instance_ids="$(__bma_read_inputs $@)"
  [[ -z "$instance_ids" ]] && __bma_usage "instance-id [instance-id]" && return 1

  for instance_id in $instance_ids; do
    aws ec2 describe-instance-attribute \
      --attribute disableApiTermination \
      --instance-id "$instance_id"      \
      --query "[InstanceId, join('=', ['DisableApiTermination', to_string(DisableApiTermination.Value)])]" \
      --output text
  done
}

instance-termination-protection-disable() {
  local instance_ids="$(__bma_read_inputs $@)"
  [[ -z "$instance_ids" ]] && __bma_usage "instance-id [instance-id]" && return 1

  echo "You are about to disable termination protection on the following instances:"
  instances "$instance_ids"
  [ -t 0 ] || exec </dev/tty # reattach keyboard to STDIN
  local regex_yes="^[Yy]$"
  printf "Are you sure you want to continue? "
  __bma_read_char_stdin REPLY
  echo
  if [[ $REPLY =~ $regex_yes ]]
  then
    for instance_id in $instance_ids; do
      aws ec2 modify-instance-attribute   \
        --attribute disableApiTermination \
        --value false                     \
        --instance-id $instance_id
    done
  fi
}

instance-termination-protection-enable() {
  local instance_ids="$(__bma_read_inputs $@)"
  [[ -z "$instance_ids" ]] && __bma_usage "instance-id [instance-id]" && return 1

  echo "You are about to enable termination protection on the following instances:"
  instances "$instance_ids"
  [ -t 0 ] || exec </dev/tty # reattach keyboard to STDIN
  local regex_yes="^[Yy]$"
  printf "Are you sure you want to continue? "
  __bma_read_char_stdin REPLY
  echo
  if [[ $REPLY =~ $regex_yes ]]
  then
    for instance_id in $instance_ids; do
      aws ec2 modify-instance-attribute   \
        --attribute disableApiTermination \
        --value true                      \
        --instance-id $instance_id
    done
  fi
}

instance-type() {
  # returns the type of an instance
  local instance_ids="$(__bma_read_inputs $@)"
  [[ -z "$instance_ids" ]] && __bma_usage "instance-id [instance-id]" && return 1

  aws ec2 describe-instances                                            \
    $([[ -n ${instance_ids} ]] && echo --instance-ids ${instance_ids})  \
    --query "
      Reservations[].Instances[][
        [
          InstanceId,
          InstanceType
        ]
      ][]"                                                              \
    --output text                                                       |
  column -s$'\t' -t
}

instance-userdata() {
  # returns userdata for instance
  local instance_ids=$(__bma_read_inputs $@)
  [[ -z "$instance_ids" ]] && __bma_usage "instance-id [instance-id]" && return 1
  local instance_id
  for instance_id in $instance_ids; do
    echo Userdata for EC2 Instance $instance_id
    aws ec2 describe-instance-attribute \
      --attribute userData              \
      --instance-id $instance_id        \
      --query UserData                  \
      --output text                     |
        base64 --decode
    echo
  done
}

instance-volumes() {
  # returns the volumes of an instance
  local instance_ids=$(__bma_read_inputs $@)
  [[ -z "$instance_ids" ]] && __bma_usage "instance-id [instance-id]" && return 1

  aws ec2 describe-instances                                            \
    $([[ -n ${instance_ids} ]] && echo --instance-ids ${instance_ids})  \
    --query "
      Reservations[].Instances[][
        [
          InstanceId,
          join(' ', BlockDeviceMappings[].Ebs[].VolumeId)
        ]
      ][]"                                                              \
    --output text                                                       |
  column -s$'\t' -t
}

instance-vpc() {
  # returns the vpc of an instance
  local instance_ids=$(__bma_read_inputs $@)
  [[ -z "$instance_ids" ]] && __bma_usage "instance-id [instance-id]" && return 1
  
  aws ec2 describe-instances                                            \
    $([[ -n ${instance_ids} ]] && echo --instance-ids ${instance_ids})  \
    --query "
      Reservations[].Instances[][
        [
          VpcId,
          InstanceId
        ]
      ][]"                                                              \
    --output text                                                       |
  column -s$'\t' -t
}

# vim: ft=sh
