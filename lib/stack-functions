#!/bin/bash
#
# stack-functions

##
# Suggested stack/template/params naming conventions
# These are completely optional.
#
#   stack   : token-env
#   template: token.yml
#   params  : token-params-env.json
#
# Where:
#
#   token : describes the resources (mywebsite, vpc, bastion, etc)
#   env   : environment descriptor (dev, test, prod, etc)
#
# Following these (entirely optional) conventions means bash-my-aws can
# infer template & params file from stack name
#
# e.g. stack-create mywebsite-test
#
#      is equivalent (if files present) to:
#
#      stack-create mywebsite-test mywebsite.yml mywebsite-params-test.json
#
# Other benefits include:
#
# * ease in locating stack for template (and vice versa) based on name
# * template and params files are listed together on filesystem
# * stack name env suffixes protect against accidents (wrong account error)
# * supports prodlike non-prod environments through using same template
#
# And don't forget, these naming conventions are completely optional.
##

# List CF stacks
#
# To make it fly we omit stacks with status of DELETE_COMPLETE
# Output sorted by CreationTime
stacks() {

  local filters=$(__bma_read_filters $@)

  aws cloudformation list-stacks                      \
    --stack-status                                    \
      CREATE_COMPLETE                                 \
      CREATE_FAILED                                   \
      CREATE_IN_PROGRESS                              \
      DELETE_FAILED                                   \
      DELETE_IN_PROGRESS                              \
      ROLLBACK_COMPLETE                               \
      ROLLBACK_FAILED                                 \
      ROLLBACK_IN_PROGRESS                            \
      UPDATE_COMPLETE                                 \
      UPDATE_COMPLETE_CLEANUP_IN_PROGRESS             \
      UPDATE_IN_PROGRESS                              \
      UPDATE_ROLLBACK_COMPLETE                        \
      UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS    \
      UPDATE_ROLLBACK_FAILED                          \
      UPDATE_ROLLBACK_IN_PROGRESS                     \
    --query "StackSummaries[][
               StackName ,
               StackStatus,
               CreationTime,
               LastUpdatedTime
             ]"                                       \
    --output text       |
  grep -E -- "$filters" |
  sort -b -k 3          |
  column -s$'\t' -t
}


stack-arn() {
  local stacks=$(__bma_read_inputs $@)
  [[ -z ${stacks} ]] && __bma_usage "stack [stack]" && return 1
  local stack
  for stack in $stacks; do
    aws cloudformation describe-stacks \
      --stack-name "$stack"            \
      --query "Stacks[].StackId" \
      --output text
  done
}

stack-cancel-update() {
  local stack=$(_stack_name_arg $(__bma_read_inputs $@))
  [[ -z ${stack} ]] && __bma_usage "stack" && return 1

  aws cloudformation cancel-update-stack --stack-name $stack
}

stack-create() {
  # type: action
  # create a new stack
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg ${inputs})
  [[ -z ${stack} ]] && __bma_usage "stack [template-file] [parameters-file] [--capabilities=OPTIONAL_VALUE] [--role-arn=OPTIONAL_VALUE]" && return 1

  local template=$(_stack_template_arg $inputs)
  if [ ! -f "$template" ]; then
    echo "Could not find template (${template}). You can specify alternative template as second argument."
    return 1
  fi

  local params=$(_stack_params_arg $inputs)
  if [ -n "$params" ]; then local parameters="--parameters file://$params"; fi

  local arn=''
  local capabilities=''
  local inputs_array=($inputs)
  local IFS='=' # override default field separator in the scope of this function only
  local regex_role_arn="^\-\-role\-arn=.*"
  local regex_capabilities="^\-\-capabilities=.*"
  for index in "${inputs_array[@]}" ; do
    if [[ "$index" =~ $regex_role_arn ]] ; then
      read arn_opt arn_arg <<< "$index" # ignore anything after option + arg
      arn="--role-arn $arn_arg"
    elif [[ "$index" =~ $regex_capabilities ]] ; then
      read caps_opt caps_arg <<< "$index" # ignore anything after option + arg
      capabilities="--capabilities $caps_arg"
    fi
  done

  unset IFS # to prevent it from breaking things later
  if aws cloudformation create-stack \
    --stack-name $stack              \
    --template-body file://$template \
    $parameters                      \
    $capabilities                    \
    $arn                             \
    --disable-rollback               \
    --output text
  then
    stack-tail $stack
  fi
}

stack-update() {
  # update an existing stack
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg  ${inputs})
  [[ -z ${stack} ]] && __bma_usage "stack [template-file] [parameters-file]" && return 1

  local template=$(_stack_template_arg $inputs)
  if [ ! -f "$template" ]; then
    echo "Could not find template (${template}). You can specify alternative template as second argument."
    return 1
  fi

  local params=$(_stack_params_arg $inputs)
  if [ -n "$params" ]; then local parameters="--parameters file://$params"; fi

  local capabilities=''
  local capabilities_value=$(_stack_capabilities $stack)
  [[ -z "${capabilities_value}" ]] || capabilities="--capabilities ${capabilities_value}"

  if aws cloudformation update-stack \
    --stack-name $stack              \
    --template-body file://$template \
    $parameters                      \
    $capabilities                    \
    --output text
  then
    stack-tail $stack
  fi
}

stack-delete() {
  # delete an existing stack
  local stacks=$(__bma_read_inputs $@)
  local stack
  [[ -z ${stacks} ]] && __bma_usage "stack [stack]" && return 1
  if ! [ -t 0 ] ; then # if STDIN is not a terminal...
    exec </dev/tty # reattach terminal to STDIN
    local regex_yes="^[Yy]$"
    echo "You are about to delete the following stacks:"
    echo "$stacks" | tr ' ' "\n"
    read -p "Are you sure you want to continue? " -n 1 -r
    echo
    [[ $REPLY =~ $regex_yes ]] || return 0
  fi
  for stack in $stacks; do
    if aws cloudformation delete-stack \
         --stack-name $stack           \
         --output text
    then
      stack-tail "$stack"
    fi
  done
}

# Returns key,value pairs for exports from *all* stacks
# This breaks from convention for bash-my-aws functions
# TODO Find a way to make it more consistent
stack-exports() {
  aws cloudformation list-exports     \
    --query 'Exports[].[Name, Value]' \
    --output text                     |
  column -s$'\t' -t
}

stack-recreate() {
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg ${inputs})
  [[ -z "${stack}" ]] && __bma_usage "stack" && return 1

  local capabilities=''
  local capabilities_value=$(_stack_capabilities $stack)
  [[ -z "${capabilities_value}" ]] || capabilities="--capabilities=${capabilities_value}"

  local tmpdir=`mktemp -d /tmp/bash-my-aws.XXXX`
  cd $tmpdir
  stack-template $stack > "${stack}.template"
  stack-parameters $stack > "${stack}-params.json"
  stack-delete $stack
  stack-create $stack \
              "${stack}.template" \
              "${stack}-params.json" \
              $capabilities
  #rm -fr $tmpdir
}

stack-failure() {
  # type: detail
  # return the reason a stack failed to update/create/delete
  # FIXME: only grab the latest failure
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg ${inputs})
  [[ -z "${stack}" ]] && __bma_usage "stack" && return 1

  aws cloudformation describe-stack-events \
    --stack-name ${stack}                  \
    --query "
      StackEvents[?contains(ResourceStatus,'FAILED')].[
        PhysicalResourceId,
        Timestamp,
        ResourceStatusReason
      ]" \
    --output text
}

stack-events() {
  # type: detail
  # return the events a stack has experienced
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg ${inputs})
  [[ -z ${stack} ]] && __bma_usage "stack" && return 1

  if output=$(aws cloudformation describe-stack-events \
    --stack-name ${stack}                  \
    --query "
      sort_by(StackEvents, &Timestamp)[].[
        Timestamp,
        LogicalResourceId,
        ResourceType,
        ResourceStatus
      ]"                                   \
    --output table); then
    echo "$output" | uniq -u
  else
    return $?
  fi
}

stack-resources() {
  # type: detail
  # return the resources managed by a stack
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg ${inputs})
  [[ -z ${stack} ]] && __bma_usage "stack" && return 1

  aws cloudformation describe-stack-resources                       \
    --stack-name ${stack}                                           \
    --query "StackResources[].[ PhysicalResourceId, ResourceType ]" \
    --output text                                                   |
  column -s$'\t' -t
}

stack-asgs() {
  # type: detail
  # return the autoscaling groups managed by a stack
  stack-resources $@                      |
  grep AWS::AutoScaling::AutoScalingGroup |
  column -t
}

stack-asg-instances() {
  # return instances for asg(s) in stack
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg ${inputs})
  [[ -z ${stack} ]] && __bma_usage "stack" && return 1

  local asgs=$(stack-asgs "$stack")
  if [[ -n $asgs ]]; then
    asg-instances $asgs
  fi
}

stack-elbs() {
  # type: detail
  # return the elastic load balancers managed by a stack
  stack-resources $@ | 
  grep AWS::ElasticLoadBalancing::LoadBalancer |
  column -t
}

stack-instances() {
  # type: detail
  # return the instances managed by a stack
  local instance_ids=$(stack-resources $@ | grep AWS::EC2::Instance | awk '{ print $1 }')
  [[ -n "$instance_ids" ]] && instances $instance_ids
}

stack-parameters() {
  # return the parameters applied to a stack
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg ${inputs})
  [[ -z ${stack} ]] && __bma_usage "stack" && return 1

  aws cloudformation describe-stacks                        \
    --stack-name ${stack}                                   \
    --query 'sort_by(Stacks[].Parameters[], &ParameterKey)' |
    jq --sort-keys .
}

stack-status() {
  # type: detail
  # return the current status of a stack
  local stacks=$(__bma_read_inputs $@)
  [[ -z ${stacks} ]] && __bma_usage "stack [stack]" && return 1

  local stack
  for stack in $stacks; do
    aws cloudformation describe-stacks                   \
      --stack-name "${stack}"                            \
      --query "Stacks[][ [ StackName, StackStatus ] ][]" \
      --output text
  done
}

stack-tag() {
  # return a selected stack tag
  local tag=$1
  shift 1
  [[ -z "${tag}" ]] && __bma_usage "tag-key stack [stack]" && return 1
  local stacks=$(__bma_read_inputs $@)
  [[ -z ${stacks} && -t 0 ]] && __bma_usage "tag-key stack [stack]" && return 1
  local stack
  for stack in $stacks; do
    aws cloudformation describe-stacks                                       \
      --stack-name "${stack}"                                                \
      --query "Stacks[].[
                 StackName,
                 join(' ', [Tags[?Key=='$tag'].[join('=',[Key,Value])][]][])
               ]"                                                            \
      --output text
  done
}

stack-tag-apply() {
  # apply a stack tag
  local tag_key=$1
  local tag_value=$2
  shift 2
  local usage_msg="tag-key tag-value stack [stack]"
  [[ -z "${tag_key}" ]]    && __bma_usage $usage_msg && return 1
  [[ -z "${tag_value}" ]] && __bma_usage $usage_msg && return 1

  local stacks=$(__bma_read_inputs $@)
  [[ -z "${stacks}" && -t 0 ]] && __bma_usage $usage_msg && return 1

  local stack
  for stack in $stacks; do

    # XXX deal with tagging service failing
    local tags=$(aws cloudformation describe-stacks \
           --stack-name "$stack"                    \
           --query "[
                  [{Key:'$tag_key', Value:'$tag_value'}],
                  Stacks[].Tags[?Key != '$tag_key'][]
                ][]")

    local parameters=$(aws cloudformation describe-stacks \
           --stack-name "$stack"                          \
           --query '
             Stacks[].Parameters[].{
               ParameterKey: ParameterKey,
               UsePreviousValue: `true`
           }')

    local capabilities=''
    local capabilities_value=$(_stack_capabilities $stack)
    [[ -z "${capabilities_value}" ]] || capabilities="--capabilities ${capabilities_value}"

     $([[ -n $DRY_RUN ]] && echo echo) aws cloudformation update-stack \
      --stack-name "$stack"         \
      --use-previous-template       \
      --parameters "$parameters"    \
      --tags "$tags"                \
      $capabilities                 \
      --query StackId               \
      --output text
  done
}

stack-tag-delete() {
  # delete a stack tag
  local tag_key=$1
  shift 1
  [[ -z "${tag_key}" ]] && __bma_usage "tag-key stack [stack]" && return 1

  local stacks=$(__bma_read_inputs $@)
  [[ -z "${stacks}" ]] && __bma_usage "tag-key stack [stack]" && return 1

  local stack
  for stack in $stacks; do

    # XXX deal with tagging service failing
    local tags=$(aws cloudformation describe-stacks \
           --stack-name "$stack"                    \
           --query "[
                  Stacks[].Tags[?Key != '$tag_key'][]
                ][]")

    local parameters=$(aws cloudformation describe-stacks \
           --stack-name "$stack"                          \
           --query '
             Stacks[].Parameters[].{
               ParameterKey: ParameterKey,
               UsePreviousValue: `true`
           }')

    aws cloudformation update-stack \
      --stack-name "$stack"         \
      --use-previous-template       \
      --parameters "$parameters"    \
      --tags "$tags"

  done
}

# Show all events for CF stack until update completes or fails.
stack-tail() {
  # type: detail
  # follow the events occuring for a stack
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg ${inputs})
  [[ -z ${stack} ]] && __bma_usage "stack" && return 1

  local current
  local final_line
  local output
  local previous
  until echo "$current" | tail -1 | egrep -q "${stack}.*_(COMPLETE|FAILED)"
  do
    if ! output=$(stack-events "$inputs"); then
      # Something went wrong with stack-events (like stack not known)
      return 1
    fi
    if [ -z "$output" ]; then sleep 1; continue; fi

    current=$(echo "$output" | sed '$d')
    final_line=$(echo "$output" | tail -1)
    if [ -z "$previous" ]; then
      echo "$current"
    elif [ "$current" != "$previous" ]; then
      comm -13 <(echo "$previous") <(echo "$current") 2> >(grep -v "not in sorted order")
    fi
    previous="$current"
    sleep 1
  done
  echo $final_line
}

stack-template() {
  # return the template applied to a stack
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg ${inputs})

  [[ -z ${stack} ]] && __bma_usage "stack" && return 1

  aws cloudformation get-template   \
    --stack-name "$stack"           \
    --query TemplateBody            |
  jq --raw-output --sort-keys .
}

stack-tags() {
  # return the stack-tags applied to a stack
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg ${inputs})

  [[ -z ${stack} ]] && __bma_usage "stack" && return 1

  aws cloudformation describe-stacks \
    --stack-name "$stack"            \
    --query 'Stacks[0].Tags'         |
  jq --sort-keys .

}

stack-tags-text() {
  # return all stack tags on a single line
  local stacks=$(__bma_read_inputs $@)

  [[ -z ${stacks} ]] && __bma_usage "stack [stack]" && return 1
  local stack
  for stack in $stacks; do
    aws cloudformation describe-stacks                                  \
      --stack-name "${stack}"                                           \
      --query "Stacks[].[
                 StackName,
                 join(' ', [Tags[].[join('=',[Key,Value])][]][])
               ]"                                                       \
      --output text
  done
}



stack-outputs() {
  # type: detail
  # return the outputs of a stack
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg ${inputs})
  [[ -z ${stack} ]] && __bma_usage "stack" && return 1

  aws cloudformation describe-stacks \
    --stack-name ${stack}            \
    --query 'Stacks[].Outputs[]'     \
    --output text                    |
  column -s$'\t' -t
}

stack-validate() {
  # type: detail
  # validate a stack template
  local inputs=$(__bma_read_inputs $@ | cut -f1)
  [[ -z "$inputs" ]] && __bma_usage "template-file" && return 1
  size=$(wc -c <"$inputs")
  if [[ $size -gt 51200 ]]; then
    # TODO: upload s3 + --template-url
    __bma_error "template too large: $size bytes, 51200 max"
    return 1
  else
    aws cloudformation validate-template --template-body file://$inputs
  fi
}

stack-diff(){
  # type: detail
  # return differences between a template and Stack
  local inputs=$(__bma_read_inputs $@)
  [[ -z "$inputs" ]] && __bma_usage "stack [template-file]" && return 1
  _stack_diff_template $inputs
  echo
  _stack_diff_params $inputs
}

#
# Requires jq-1.4 or later # http://stedolan.github.io/jq/download/
#
_stack_diff_template() {
  # report changes which would be made to stack if template were applied
  [[ -z "$1" ]] && __bma_usage "stack [template-file]" && return 1
  local stack="$(_stack_name_arg $@)"
  if ! aws cloudformation describe-stacks --stack-name $stack 1>/dev/null; then
    return 1;
  fi
  local template="$(_stack_template_arg $stack $2)"
  if [ ! -f "$template" ]; then
    echo "Could not find template (${template})." >&2
    echo "You can specify alternative template as second argument." >&2
    return 1
  fi
  if [ "x$( type -P colordiff )" != "x" ]; then
    local DIFF_CMD=colordiff
  else
    local DIFF_CMD=diff
  fi

  $DIFF_CMD -u                     \
    --label stack                  \
      <( stack-template $stack)    \
     --label $template             \
       <(jq --sort-keys . $template 2>/dev/null || cat $template )

  if [ $? -eq 0 ]; then
    echo "template for stack ($stack) and contents of file ($template) are the same" >&2
  fi
}

#
# Requires jq-1.4 or later # http://stedolan.github.io/jq/download/
#
_stack_diff_params() {
  # report on what changes would be made to stack by applying params
  [[ -z "$1" ]] && __bma_usage "stack [template-file]" && return 1
  local stack="$(_stack_name_arg $@)"
  if ! aws cloudformation describe-stacks --stack-name $stack 1>/dev/null; then
    return 1;
  fi
  local template="$(_stack_template_arg $stack $2)"
  if [ ! -f "$template" ]; then
    echo "Could not find template (${template}). You can specify alternative template as second argument." >&2
    return 1
  fi
  local params="$(_stack_params_arg $stack $template $3)"
  if [ -z "$params" ]; then
    echo "No params file provided. Skipping" >&2
    return 0
  fi
  if [ ! -f "$params" ]; then
    return 1
  fi
  if [ "x$( type -P colordiff )" != "x" ]; then
    local DIFF_CMD=colordiff
  else
    local DIFF_CMD=diff
  fi

  $DIFF_CMD -u                                   \
    --label params                               \
      <(aws cloudformation describe-stacks       \
          --query "Stacks[].Parameters[]"        \
          --stack-name $stack                    |
        jq --sort-keys 'sort_by(.ParameterKey)') \
    --label $params                              \
      <(jq --sort-keys 'sort_by(.ParameterKey)' $params)

  if [ $? -eq 0 ]; then
    echo "params for stack ($stack) and contents of file ($params) are the same" >&2
  fi
}

_stack_name_arg() {
  # Extract the stack name from the template file
  # Allows us to specify template name as stack name
  # File extension gets stripped off
  local regex_role_arn_or_capabilities="^\-\-role\-arn=.*|^\-\-capabilities=.*"
  if [[ $1 =~ $regex_role_arn_or_capabilities ]] ; then
    return 1
  fi
  basename "$1" | sed 's/[.].*$//' # remove file extension
}

_stack_template_arg() {
  # Determine name of template to use
  local stack="$(_stack_name_arg $@)"
  local template=$2
  for extension in json yaml yml; do
    if [ -z "$template" ]; then
      if [ -f "${stack}.${extension}" ]; then
        template="${stack}.${extension}"
        break
      elif [ -f "${stack%-*}.${extension}" ]; then
        template="${stack%-*}.${extension}"
        break
      fi
    fi
  done

  local regex_role_arn_or_capabilities="^\-\-role\-arn=.*|^\-\-capabilities=.*"
  if [[ $template =~ $regex_role_arn_or_capabilities ]] ; then
    return 1
  fi

  echo $template
}

_stack_params_arg() {
  # determine name of params file to use
  local stack="$(_stack_name_arg $@)"
  local template="$(_stack_template_arg $@)"
  local params=${3:-$(echo $stack | sed "s/\($(basename $template .json)\)\(.*\)/\1-params\2.json/")};
  if [ -f "${params}" ]; then
    echo $params
  fi
}

_stack_capabilities() {
  # determine what (if any) capabilities a given stack was deployed with
  aws cloudformation describe-stacks --stack-name "$1" --query 'Stacks[].Capabilities' --output text
}

## vim: ft=sh
