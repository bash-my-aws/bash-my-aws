#!/bin/bash
#
# stack-functions

if [[ $(basename ${SHELL}) == "zsh" ]]; then
  source $(dirname ${(%):-%N})/shared.inc
else
  source $(dirname ${BASH_SOURCE[0]})/shared.inc
fi

##
# Suggested stack/template/params naming conventions
# These are completely optional.
#
#   stack   : token-env
#   template: token.json
#   params  : token-params-env.json
#
# Where:
#
#   token : describes the resources (mywebsite, vpc, bastion, etc)
#   env   : environment descriptor (dev, test, prod, etc)
#
# Following these (entirely optional) conventions means bash-my-aws can
# infer template & params file from stack name
#
# e.g. stack-create mywebsite-test
#
#      is equivalent (if files present) to:
#
#      stack-create mywebsite-test mywebsite.json mywebsite-params-test.json
#
# Other benefits include:
#
# * ease in locating stack for template (and vice versa) based on name
# * template and params files are listed together on filesystem
# * stack name env suffixes protect against accidents (wrong account error)
# * supports prodlike non-prod environments through using same template
#
# And don't forget, these naming conventions are completely optional.
##


# List CF stacks. Optionally filter on stack name.
# e.g.
#      stacks foo
#
# To make it fly we omit stacks with status of DELETE_COMPLETE
stacks() {
  # type: query
  # list the stacks
  # TODO: allow filtering for resources
  local inputs=$(__bma_read_inputs $@)

  if __bma_read_switches ${inputs} | grep ^--debug > /dev/null; then
    BMA_DEBUG=true
  else
    BMA_DEBUG=false
  fi

  local grep_args=$(__bma_read_resources $inputs)
  local query=$(__bma_read_switches $inputs | grep ^--query | cut -d\  -f2-)
  local output=$(__bma_read_switches $inputs | grep ^--output | cut -d\  -f2-)

  if ${BMA_DEBUG}; then
    echo "inputs: ${inputs}"
    echo "instance_ids: ${instance_ids}"
    echo "query: ${query}"
    echo "output: ${output}"
  fi

  [[ -z $query ]] && local query='StackSummaries[][ StackName ]'

  local grep_filter=""
  for arg in ${grep_args}; do
    grep_filter+="-e ${arg} "
  done

  aws cloudformation list-stacks                      \
    --stack-status                                    \
      CREATE_COMPLETE                                 \
      CREATE_FAILED                                   \
      CREATE_IN_PROGRESS                              \
      DELETE_FAILED                                   \
      DELETE_IN_PROGRESS                              \
      ROLLBACK_COMPLETE                               \
      ROLLBACK_FAILED                                 \
      ROLLBACK_IN_PROGRESS                            \
      UPDATE_COMPLETE                                 \
      UPDATE_COMPLETE_CLEANUP_IN_PROGRESS             \
      UPDATE_IN_PROGRESS                              \
      UPDATE_ROLLBACK_COMPLETE                        \
      UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS    \
      UPDATE_ROLLBACK_FAILED                          \
      UPDATE_ROLLBACK_IN_PROGRESS                     \
    --query "${query}"                                \
    --output ${output:-"text"}                        |
    sort                                              |
    grep --color=never ${grep_filter:-".*"}
}


stack-cancel-update() {
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg $(__bma_read_resources ${inputs}))
  [[ -z ${stack} ]] && __bma_usage "stack [template-file] [parameters-file]" && return 1
  aws cloudformation cancel-update-stack --stack-name $stack
}

stack-create() {
  # type: action
  # create a new stack
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg $(__bma_read_resources ${inputs}))
  [[ -z ${stack} ]] && __bma_usage "stack [template-file] [parameters-file]" && return 1

  local template=$(_stack_template_arg $inputs)
  if [ ! -f "$template" ]; then
    echo "Could not find template (${template}). You can specify alternative template as second argument."
    return 1
  fi
  local params=$(_stack_params_arg $inputs)
  if [ -n "$params" ]; then local parameters="--parameters file://$params"; fi

  if aws cloudformation create-stack --stack-name $stack --template-body file://$template $parameters --capabilities CAPABILITY_IAM --disable-rollback
  then
    stack-tail $stack
  fi
}

stack-update() {
  # type: action
  # update an existing stack
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg $(__bma_read_resources ${inputs}))
  [[ -z ${stack} ]] && __bma_usage "stack [template-file] [parameters-file]" && return 1

  local template=$(_stack_template_arg $inputs)
  if [ ! -f "$template" ]; then
    echo "Could not find template (${template}). You can specify alternative template as second argument."
    return 1
  fi
  local params=$(_stack_params_arg $inputs)
  if [ -n "$params" ]; then local parameters="--parameters file://$params"; fi

  if aws cloudformation update-stack --stack-name $stack --template-body file://$template $parameters --capabilities CAPABILITY_IAM
  then
    stack-tail $stack
  fi
}

stack-delete() {
  # type: action
  # delete an existing stack
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg $(__bma_read_resources ${inputs}))
  [[ -z "${stack}" ]] && __bma_usage "stack" && return 1

  if aws cloudformation delete-stack --stack-name $stack; then
    stack-tail $stack
  fi
}

stack-recreate() {
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg $(__bma_read_resources ${inputs}))
  [[ -z "${stack}" ]] && __bma_usage "stack" && return 1

  local tmpdir=`mktemp -d /tmp/bash-my-aws.XXXX`
  cd $tmpdir
  stack-template $stack > $stack.json
  stack-parameters $stack > $stack-params.json
  stack-delete $stack
  stack-create $stack
  # rm -fr $tmpdir
}

stack-failure() {
  # type: detail
  # return the reason a stack failed to update/create/delete
  # FIXME: only grab the latest failure
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg $(__bma_read_resources ${inputs}))
  [[ -z "${stack}" ]] && __bma_usage "stack" && return 1

  local query='
    StackEvents[?contains(ResourceStatus,`FAILED`)].[
      PhysicalResourceId,
      Timestamp,
      ResourceStatusReason
    ]
  '
  local output=$(__bma_read_switches $inputs | grep ^--output | cut -d\  -f2-)

  aws cloudformation describe-stack-events \
    --stack-name ${stack}                  \
    --query "${query}"                     \
    --output ${output:-"text"}
}

stack-events() {
  # type: detail
  # return the events a stack has experienced
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg $(__bma_read_resources ${inputs}))
  [[ -z ${stack} ]] && __bma_usage "stack" && return 1

  local query='
    sort_by(StackEvents, &Timestamp)[].[
      Timestamp,
      LogicalResourceId,
      ResourceType,
      ResourceStatus
    ]
  '
  local output=$(__bma_read_switches $inputs | grep ^--output | cut -d\  -f2-)

  if output=$(aws cloudformation describe-stack-events \
    --stack-name ${stack}                              \
    --query "${query}"                                 \
    --output ${output:-"table"}); then
    echo "$output" | uniq -u
  else
    return $?
  fi
}

stack-resources() {
  # type: detail
  # return the resources managed by a stack
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg $(__bma_read_resources ${inputs}))
  [[ -z ${stack} ]] && __bma_usage "stack" && return 1

  local query='StackResources[].[ PhysicalResourceId, ResourceType ]'

  local output=$(__bma_read_switches $inputs | grep ^--output | cut -d\  -f2-)

  aws cloudformation describe-stack-resources \
    --stack-name ${stack}                     \
    --query "${query}"                        \
    --output ${output:-"text"}
}

stack-asgs() {
  # type: detail
  # return the autoscaling groups managed by a stack
  stack-resources $@ | grep AWS::AutoScaling::AutoScalingGroup
}

stack-elbs() {
  # type: detail
  # return the elastic load balancers managed by a stack
  stack-resources $@ | grep AWS::ElasticLoadBalancing::LoadBalancer
}

stack-instances() {
  # type: detail
  # return the instances managed by a stack
  local instance_ids=$(stack-resources $@ | grep AWS::EC2::Instance | cut -f1)
  [[ -n "$instance_ids" ]] && instances $instance_ids
}

stack-parameters() {
  # type: detail
  # return the parameters applied to a stack
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg $(__bma_read_resources ${inputs}))
  [[ -z ${stack} ]] && __bma_usage "stack" && return 1

  local query='sort_by(Stacks[].Parameters[], &ParameterKey)'
  local output=$(__bma_read_switches $inputs | grep ^--output | cut -d\  -f2-)

  aws cloudformation describe-stacks        \
    --stack-name ${stack}                   \
    --query "${query}"                      \
    --output ${output:-json}                |
    jq --sort-keys .
}

stack-status() {
  # type: detail
  # return the current status of a stack
  local inputs=$(__bma_read_inputs $@)
  local query='
    StackSummaries[][
      [
        StackName,
        StackStatus
      ]
    ][]
  '
  stacks ${inputs} --query ${query}
}

# Show all events for CF stack until update completes or fails.
stack-tail() {
  # type: detail
  # follow the events occuring for a stack
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg $(__bma_read_resources ${inputs}))
  [[ -z ${stack} ]] && __bma_usage "stack" && return 1

  local current
  local final_line
  local output
  local previous
  until echo "$current" | tail -1 | egrep -q "${stack}.*_(COMPLETE|FAILED)"
  do
    if ! output=$(stack-events "$inputs"); then
      # Something went wrong with stack-events (like stack not known)
      return 1
    fi
    if [ -z "$output" ]; then sleep 1; continue; fi

    current=$(echo "$output" | sed '$d')
    final_line=$(echo "$output" | tail -1)
    if [ -z "$previous" ]; then
      echo "$current"
    elif [ "$current" != "$previous" ]; then
      comm -13 <(echo "$previous") <(echo "$current")
    fi
    previous="$current"
    sleep 1
  done
  echo $final_line
}

stack-template() {
  # type: detail
  # return the template applied to a stack
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg $(__bma_read_resources ${inputs}))

  aws cloudformation get-template   \
    --stack-name ${stack}           \
    --query TemplateBody | jq --sort-keys .
}

stack-outputs() {
  # type: detail
  # return the outputs of a stack
  local inputs=$(__bma_read_inputs $@)
  local stack=$(_stack_name_arg $(__bma_read_resources ${inputs}))
  [[ -z ${stack} ]] && __bma_usage "stack" && return 1

  local query='
    Stacks[].Outputs[]
  '
  local output=$(__bma_read_switches $inputs | grep ^--output | cut -d\  -f2-)

  aws cloudformation describe-stacks        \
    --stack-name ${stack}                   \
    --query "${query}"                      \
    --output ${output:-"text"}
}

stack-validate() {
  # type: detail
  # validate a json stack template
  local inputs=$(__bma_read_inputs $@ | cut -f1)
  [[ -z "$inputs" ]] && __bma_usage "template-file" && return 1
  aws cloudformation validate-template --template-body file://$inputs
}

stack-diff(){
  # type: detail
  # return differences between a template and Stack
  local inputs=$(__bma_read_inputs $@)
  [[ -z "$inputs" ]] && __bma_usage "stack [template-file]" && return 1
  _stack_diff_template $inputs
  echo
  _stack_diff_params $inputs
}

#
# Requires jq-1.4 or later # http://stedolan.github.io/jq/download/
#
_stack_diff_template() {
  # report changes which would be made to stack if template were applied
  [[ -z "$1" ]] && __bma_usage "stack [template-file]" && return 1
  local stack="$(_stack_name_arg $@)"
  if ! aws cloudformation describe-stacks --stack-name $stack 1>/dev/null; then
    return 1;
  fi
  local template="$(_stack_template_arg $stack $2)"
  if [ ! -f "$template" ]; then
    echo "Could not find template (${template})." >&2
    echo "You can specify alternative template as second argument." >&2
    return 1
  fi
  if [ "x$( type -P colordiff )" != "x" ]; then
    local DIFF_CMD=colordiff
  else
    local DIFF_CMD=diff
  fi
  $DIFF_CMD -u --label stack <(aws cloudformation get-template  --stack-name $stack --query TemplateBody | jq --sort-keys .) --label $template <(jq --sort-keys . $template)
  if [ $? -eq 0 ]; then
    echo "template for stack ($stack) and contents of file ($template) are the same" >&2
  fi
}

#
# Requires jq-1.4 or later # http://stedolan.github.io/jq/download/
#
_stack_diff_params() {
  # report on what changes would be made to stack by applying params
  [[ -z "$1" ]] && __bma_usage "stack [template-file]" && return 1
  local stack="$(_stack_name_arg $@)"
  if ! aws cloudformation describe-stacks --stack-name $stack 1>/dev/null; then
    return 1;
  fi
  local template="$(_stack_template_arg $stack $2)"
  if [ ! -f "$template" ]; then
    echo "Could not find template (${template}). You can specify alternative template as second argument." >&2
    return 1
  fi
  local params="$(_stack_params_arg $stack $template $3)"
  if [ -z "$params" ]; then
    echo "No params file provided. Skipping" >&2
    return 0
  fi
  if [ ! -f "$params" ]; then
    return 1
  fi
  if [ "x$( type -P colordiff )" != "x" ]; then
    local DIFF_CMD=colordiff
  else
    local DIFF_CMD=diff
  fi
  $DIFF_CMD -u --label params <(aws cloudformation describe-stacks --query "Stacks[].Parameters[]" --stack-name $stack | jq --sort-keys 'sort_by(.ParameterKey)') --label $params <(jq --sort-keys 'sort_by(.ParameterKey)' $params);
  if [ $? -eq 0 ]; then
    echo "params for stack ($stack) and contents of file ($params) are the same" >&2
  fi
}

_stack_name_arg() {
  # extract the stack name from the template file
  basename "$1" .json
}

_stack_template_arg() {
  # determine name of template to use
  local stack="$(_stack_name_arg $@)"
  local template=$2
  if [ -z "$template" ]; then
    if [ -f "${stack}.json" ]; then
      template="${stack}.json"
    elif [ -f "${stack%-*}.json" ]; then
      template="${stack%-*}.json"
    fi
  fi
  echo $template
}

_stack_params_arg() {
  # determine name of params file to use
  local stack="$(_stack_name_arg $@)"
  local template="$(_stack_template_arg $@)"
  local params=${3:-$(echo $stack | sed "s/\($(basename $template .json)\)\(.*\)/\1-params\2.json/")};
  if [ -f "${params}" ]; then
    echo $params
  fi
}

## vim: ft=sh
