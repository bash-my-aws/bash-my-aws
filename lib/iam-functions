#!/bin/bash
#
# iam-functions

# [TIP] When a trusted Role is recreated, the trust is broken.
# When the trust is broken, the friendly name is no longer used.
# Thus, broken trust relationships can be listed with:
#
# `iam-roles | iam-role-principal | grep AROA`

iam-roles() {

  # List IAM Roles
  #
  #     $ iam-roles
  #     config-role-ap-southeast-2               AROAI3QHAU3J2CDRNLQHD  2017-02-02T03:03:02Z
  #     AWSBatchServiceRole                      AROAJJWRGUPTRXTV52TED  2017-03-09T05:31:39Z
  #     ecsInstanceRole                          AROAJFQ3WMZXESGIKW5YD  2017-03-09T05:31:39Z

  local role_names=$(skim-stdin)
  local filters=$(__bma_read_filters $@)

  aws iam list-roles    \
    --output text       \
    --query "
      Roles[${role_names:+?contains(['${role_names// /"','"}'], RoleName)}].[
        RoleName,
        RoleId,
        CreateDate
    ]"                  |
  grep -E -- "$filters" |
  LC_ALL=C sort -b -k 3 |
    columnise
}

iam-role-principal(){

  # List role principal for IAM Role(s)
  #
  #     USAGE: iam-role-principal role-name [role-name]

  local role_names=$(skim-stdin "$@")
  [[ -z "$role_names" ]] && __bma_usage "role-name [role-name]" && return 1

  aws iam list-roles                                                         \
    --output text                                                            \
    --query "
      Roles[?contains('$role_names', RoleName)].[
        RoleName,
        AssumeRolePolicyDocument.Statement[0].Effect,
        AssumeRolePolicyDocument.Statement[0].Action,
        join('', keys(AssumeRolePolicyDocument.Statement[0].Principal)),
        join(',', values(AssumeRolePolicyDocument.Statement[0].Principal)[])
    ]"              |
  LC_ALL=C sort     |
    columnise
}

iam-users() {

  # List IAM Users
  #
  #     $ iam-users
  #     config-role-ap-southeast-2               AROAI3QHAU3J2CDRNLQHD  2017-02-02T03:03:02Z
  #     AWSBatchServiceRole                      AROAJJWRGUPTRXTV52TED  2017-03-09T05:31:39Z
  #     ecsInstanceRole                          AROAJFQ3WMZXESGIKW5YD  2017-03-09T05:31:39Z

  local filters=$(__bma_read_filters $@)

  aws iam list-users    \
    --output text       \
    --query '
      Users[].[
        UserName,
        UserId,
        CreateDate
    ]'                  |
  grep -E -- "$filters" |
  LC_ALL=C sort -b -k 3 |
    columnise
}

iam-role-policies-attached() {
  local role_names=$(skim-stdin "$@")
  [[ -z $role_names ]] && __bma_usage "role-name [role-name]" && return 1

  local role_name
  for role_name in $role_names; do
    aws iam list-attached-role-policies \
      --role-name "${role_name}" \
      --output text \
      --query "AttachedPolicies[].[
        PolicyName,
        '$role_name'
        ]"
  done
}

iam-role-policies-inline() {
  local role_names=$(skim-stdin "$@")
  [[ -z $role_names ]] && __bma_usage "role-name [role-name]" && return 1

  local role_name
  for role_name in $role_names; do
    aws iam list-role-policies \
      --role-name "${role_name}" \
      --query "PolicyNames[]" \
      --output text
  done
}

iam-policy-documents() {
  local policy_names=$(skim-stdin "$@")
  [[ -z $policy_names ]] && __bma_usage "policy-name [policy-name]" && return 1

  local policy_name
  for policy_name in $policy_names; do
    local policy_arn=$(aws iam list-policies --query "Policies[?PolicyName=='${policy_name}'].Arn | [0]" --output text)
    if [[ $policy_arn != "None" ]]; then
      local version_id=$(aws iam get-policy --policy-arn "${policy_arn}" --query "Policy.DefaultVersionId" --output text)
      aws iam get-policy-version --policy-arn "${policy_arn}" --version-id "${version_id}" --query "PolicyVersion.Document" --output json
    else
      echo "No policy found with name: ${policy_name}" >&2
    fi
  done
}

