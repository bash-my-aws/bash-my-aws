#!/bin/bash
#
# iam-functions

# [TIP] When a trusted Role is recreated, the trust is broken.
# When the trust is broken, the friendly name is no longer used.
# Thus, broken trust relationships can be listed with:
#
# `iam-roles | iam-role-principal | grep AROA`

iam-roles() {

  # List IAM Roles
  #
  #     $ iam-roles
  #     config-role-ap-southeast-2               AROAI3QHAU3J2CDRNLQHD  2017-02-02T03:03:02Z
  #     AWSBatchServiceRole                      AROAJJWRGUPTRXTV52TED  2017-03-09T05:31:39Z
  #     ecsInstanceRole                          AROAJFQ3WMZXESGIKW5YD  2017-03-09T05:31:39Z

  local role_names=$(skim-stdin)
  local filters=$(__bma_read_filters $@)

  aws iam list-roles    \
    --output text       \
    --query "
      Roles[${role_names:+?contains(['${role_names// /"','"}'], RoleName)}].[
        RoleName,
        RoleId,
        CreateDate
    ]"                  |
  grep -E -- "$filters" |
  LC_ALL=C sort -b -k 3 |
    columnise
}

iam-role-principal(){

  # List role principal for IAM Role(s)
  #
  #     USAGE: iam-role-principal role-name [role-name]

  local role_names=$(skim-stdin "$@")
  [[ -z "$role_names" ]] && __bma_usage "role-name [role-name]" && return 1

  aws iam list-roles                                                         \
    --output text                                                            \
    --query "
      Roles[?contains('$role_names', RoleName)].[
        RoleName,
        AssumeRolePolicyDocument.Statement[0].Effect,
        AssumeRolePolicyDocument.Statement[0].Action,
        join('', keys(AssumeRolePolicyDocument.Statement[0].Principal)),
        join(',', values(AssumeRolePolicyDocument.Statement[0].Principal)[])
    ]"              |
  LC_ALL=C sort     |
    columnise
}

iam-users() {

  # List IAM Users
  #
  #     $ iam-users
  #     config-role-ap-southeast-2               AROAI3QHAU3J2CDRNLQHD  2017-02-02T03:03:02Z
  #     AWSBatchServiceRole                      AROAJJWRGUPTRXTV52TED  2017-03-09T05:31:39Z
  #     ecsInstanceRole                          AROAJFQ3WMZXESGIKW5YD  2017-03-09T05:31:39Z

  local filters=$(__bma_read_filters $@)

  aws iam list-users    \
    --output text       \
    --query '
      Users[].[
        UserName,
        UserId,
        CreateDate
    ]'                  |
  grep -E -- "$filters" |
  LC_ALL=C sort -b -k 3 |
    columnise
}

iam-access-key-rotate() {
    local user_name="$1"

    # Check if user exists
    if ! aws iam get-user --user-name "$user_name" >/dev/null 2>&1; then
        echo "User does not exist."
        return
    fi

    read -p "Proceed with key rotation for user $user_name? (y/n): " confirm
    if [ "$confirm" != "y" ]; then
        echo "Key rotation cancelled."
        return
    fi

    # Get existing keys
    local keys=$(aws iam list-access-keys --user-name "$user_name")
    local active_keys=$(echo "$keys" | jq -r '.AccessKeyMetadata[] | select(.Status == "Active") | .AccessKeyId')
    local inactive_keys=$(echo "$keys" | jq -r '.AccessKeyMetadata[] | select(.Status == "Inactive") | .AccessKeyId')

    # Identify and remove inactive keys if exist
    if [ -n "$inactive_keys" ]; then
        IFS=$'\n' # Set Internal Field Separator to newline for the loop
        for key_to_remove in $inactive_keys; do
            read -p "Remove inactive key $key_to_remove for user $user_name? (y/n): " confirm
            if [ "$confirm" == "y" ]; then
                aws iam delete-access-key --user-name "$user_name" --access-key-id "$key_to_remove"
            fi
        done
    fi

    # Identify and remove inactive keys if exist
    if [ -n "$inactive_keys" ]; then
        while read -r key_to_remove; do
            read -p "Remove inactive key $key_to_remove for user $user_name? (y/n): " confirm
            [ "$confirm" == "y" ] && aws iam delete-access-key --user-name "$user_name" --access-key-id "$key_to_remove"
        done <<<"$inactive_keys"
    fi

    # If one or zero active keys, create a new key
    if [ $(echo "$active_keys" | wc -l) -lt 2 ]; then
        read -p "Create new key for user $user_name? (y/n): " confirm
        if [ "$confirm" == "y" ]; then
            local new_key=$(aws iam create-access-key --user-name "$user_name" | jq -r '.AccessKey')
            local access_key_id=$(echo "$new_key" | jq -r '.AccessKeyId')
            local secret_access_key=$(echo "$new_key" | jq -r '.SecretAccessKey')
            local date=$(date +%Y-%m-%d)

            # Create the secret in Secrets Manager
            aws secretsmanager create-secret \
                --name "IAM-USER-$user_name-ACCESS-KEY-$access_key_id-$date" \
                --description "Access Key Secret generated for IAM User Key rotation for user $user_name." \
                --secret-string "{\"AccessKeyId\":\"$access_key_id\",\"SecretAccessKey\":\"$secret_access_key\"}"

            echo "New key created and stored in Secrets Manager."
        fi
        local secrets_name="IAM-USER-$user_name-ACCESS-KEY-$access_key_id-$date"
        local AWS_ACCOUNT_NAME=$(aws sts get-caller-identity --query Account --output text)

        echo "----------------------------------------"
        echo "COMMUNICATION TEMPLATE:"
        echo "----------------------------------------"
        echo "A IAM USER Access Key has been generated for the user $user_name."
        echo "This has been stored in Secrets Manager in the account $AWS_ACCOUNT_NAME."
        echo "The secret's name is $secrets_name."
        echo "----------------------------------------"
    else
        echo "Both keys are active. Contact the application owner to determine which key to remove."
    fi
}
