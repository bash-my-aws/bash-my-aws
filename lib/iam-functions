#!/bin/bash
#
# iam-functions

# [TIP] When a trusted Role is recreated, the trust is broken.
# When the trust is broken, the friendly name is no longer used.
# Thus, broken trust relationships can be listed with:
#
# `iam-roles | iam-role-principal | grep AROA`


iam-roles() {

  # List IAM Roles
  #
  #     $ iam-roles
  #     config-role-ap-southeast-2               AROAI3QHAU3J2CDRNLQHD  2017-02-02T03:03:02Z
  #     AWSBatchServiceRole                      AROAJJWRGUPTRXTV52TED  2017-03-09T05:31:39Z
  #     ecsInstanceRole                          AROAJFQ3WMZXESGIKW5YD  2017-03-09T05:31:39Z

  local filters=$(__bma_read_filters $@)

  aws iam list-roles    \
    --query 'Roles[].[
      RoleName,
      RoleId,
      CreateDate
    ]'                  \
    --output text       |
  grep -E -- "$filters" |
  LC_ALL=C sort -b -k 3 |
  column -s$'\t' -t
}


iam-role-principal(){

  # List role principal for IAM Role(s)
  #
  #     USAGE: iam-role-principal role-name [role-name]

  local role_names="$(__bma_read_inputs $@)"
  [[ -z "$role_names" ]] && __bma_usage "role-name [role-name]" && return 1

  aws iam list-roles \
    --query "
      Roles[?contains('$role_names', RoleName)].[
        RoleName,
        AssumeRolePolicyDocument.Statement[0].Effect,
        AssumeRolePolicyDocument.Statement[0].Action,
        join('', keys(AssumeRolePolicyDocument.Statement[0].Principal)),
        join(',', values(AssumeRolePolicyDocument.Statement[0].Principal)[])
    ]" \
    --output text   |
  LC_ALL=C sort              |
  column -s$'\t' -t
}

reset-password() {
  if [[ $# -ne 2 ]]
  then
    __bma_usage "[username] [password]"
    return 1
  fi
  local username=$1
  local password=$2

  read -p "Are you sure you want to reset $username's password? " -n 1 -r
  echo

  local regex_yes="^[Yy]$"
  if [[ $REPLY =~ $regex_yes ]]
  then
      read -p "Should the user specify a new password on their next sign-in? " -n 1 -r
      echo
      if [[ $REPLY =~ $regex_yes ]]
      then
        aws iam update-login-profile \
          --user-name $username \
          --password $password  \
          --password-reset-required
      else
        aws iam update-login-profile \
          --user-name $username \
          --password $password  \
          --no-password-reset-required
      fi
      # echoing the password in case command substitution or env vars
      # are used to specify the password, meaning that the user doesn't know
      # the password in advance and will need to see it in order to save it somewhere
      echo "set password for $username to '$password'"
  fi
}
