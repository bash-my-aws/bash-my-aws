#!/bin/bash
#
# aws-account-functions
#
# These functions target AWS Accounts and act on either the account you're
# authenticated to or the Account IDs provided to them.

aws-accounts() {

  # List AWS Accounts in an [Organization](https://aws.amazon.com/organizations/)
  #
  #    $ aws-accounts
  #    089834043791  account1 ACTIVE  INVITED  1488257653.638  mike-aws@bailey.net.au
  #    812094344564  account2 ACTIVE  CREATED  1537922950.972  mike-bash-my-aws@bailey.net.au
  #    001721147249  account3 ACTIVE  INVITED  1548752330.723  mike@bailey.net.au
  #    867077406134  account4 ACTIVE  CREATED  1557910982.885  mike-deleteme@bailey.net.au
  #    892345420873  account5 ACTIVE  CREATED  1557911243.358  mike-delete@bailey.net.au
  #
  # *Optionally provide a filter string for a `| grep` effect with tighter columisation:*

  local account_ids=$(skim-stdin)
  local filters=$(__bma_read_filters "$@")

  aws organizations list-accounts \
    --output text                 \
    --query "
      Accounts[${account_ids:+?contains(['${account_ids// /"','"}'], Id)}].[
        Id,
        Name,
        Status,
        JoinedMethod,
        JoinedTimestamp,
        Email
      ]"                |
  grep -E -- "$filters" |
  LC_ALL=C sort -b -k 2 |
  columnise

}

aws-account-alias() {

  # Retrieve AWS Account Alias for current account
  #
  #     $ aws-account-alias
  #     example-account-prod

  aws iam list-account-aliases \
    --query AccountAliases     \
    --output text
}

aws-account-id() {

  # Retrieve AWS Account ID for current account
  #
  #     $ aws-account-id
  #     012345678901

  aws sts get-caller-identity --query Account --output text
}

aws-profiles() {

  credentials_file="${AWS_SHARED_CREDENTIALS_FILE:-$HOME/.aws/credentials}"

  awk -F'=' '
    /^\[.*\]$/ {
      if (access_key != "" && secret_key != "" || source_profile != "") print profile;
      profile=$0; access_key=""; secret_key=""; source_profile=""
    }
    $1 ~ /aws_access_key_id/ { access_key=$2 }
    $1 ~ /aws_secret_access_key/ { secret_key=$2 }
    $1 ~ /source_profile/ { source_profile=$2 }
    END { if (access_key != "" && secret_key != "" || source_profile != "") print profile }
  ' "$credentials_file" | tr -d '[]' | sort -u
}


aws-account-each() {

  # Run a script/command across a number of AWS Accounts
  #
  #     USAGE: aws-account-each cmd # pipe in AWS_ACCOUNT_IDS
  #
  #     $ grep non_prod AWS_ACCOUNTS | aws-account-each stacks FAILED
  #
  #     # account=012345678901 alias=example-account-prod
  #     example-stack1-prod  CREATED_FAILED
  #     example-stack2-prod  UPDATE_ROLLBACK_FAILED
  #     # account=123456789012 alias=example-account-staging
  #     example-stack1-staging  CREATED_FAILED
  #     example-stack2-staging  UPDATE_ROLLBACK_FAILED
  #
  # !!! Note
  #     In order to use `aws-account-each`, you need to be authenticated with an
  #     IAM Role that can assume a Role in each of the specified accounts.
  #     Check the source for more info.

  local aws_account_ids=$(skim-stdin)
  local cmd=$@
  local assumed_role_name="${AWS_PANOPTICON_ROLE_NAME:-SecurityAuditor}"
  [[ -z $aws_account_ids ]] && __bma_usage "cmd # pipe in AWS_ACCOUNT_IDS" && return 1

  echo "#command=${cmd}"
  echo "#"

  for aws_account_id in $aws_account_ids; do
    local assumed_env=$(sts-assume-role "arn:aws:iam::${aws_account_id}:role/${assumed_role_name}")
    [[ -z "$assumed_env" ]] && continue # AWSCLI prints error if assuming role fails
    local aws_account_alias="$(export $assumed_env && aws-account-alias)"
    echo "#account=$aws_account_id alias=${aws_account_alias}"
    if ! output=$(export $assumed_env && eval "$cmd"); then
      : # something went wrong
    fi
    [ -z "$output" ] || printf '%s\n\n' "${output%$'\n'}"
  done
}

aws-panopticon() {

  # aws-panopticon was previous name for aws-account-each()

  aws-account-each $@
}

aws-account-cost-explorer(){

  # Use with an AWS Organisations Master Account to open multiple accounts
  # in Cost Explorer.
  #
  #     $ grep demo AWS_ACCOUNTS | aws-account-cost-explorer
  #     #=> Opens web browser to AWS Cost Explorer with accounts selected

  local accounts_formatted="%22$(skim-stdin "$@" | sed 's/ /%22,%22/g')%22"

  local cmd_open="$(hash xdg-open &> /dev/null && echo 'xdg-open' || echo 'open')"

  $cmd_open "https://console.aws.amazon.com/cost-reports/home?#/custom?groupBy=None&hasBlended=false&hasAmortized=false&excludeDiscounts=true&excludeTaggedResources=false&chartStyle=Group&granularity=Monthly&reportType=CostUsage&isTemplate=false&filter=%5B%7B%22dimension%22:%22LinkedAccount%22,%22values%22:%5B$accounts_formatted%5D,%22include%22:true,%22children%22:null%7D%5D&usageAs=usageQuantity&forecastTimeRangeOption=None&&timeRangeOption=YearToDate"

}

# View a list of AWS_ACCOUNT_IDs in AWS Cost Recommendations

aws-account-cost-recommendations(){

  # Use with an AWS Organisations Master Account to open multiple accounts
  # in Cost Recommendations.
  #
  #     $ grep non_prod AWS_ACCOUNTS | aws-account-each stacks FAILED
  #     #=> Opens web browser to AWS Cost Recommendations with accounts selected

  local accounts_formatted="%22$(skim-stdin "$@" | sed 's/ /%22,%22/g')%22"

  local cmd_open="$(hash xdg-open &> /dev/null && echo 'xdg-open' || echo 'open')"

  $cmd_open "https://console.aws.amazon.com/cost-reports/home?#/recommendations/rightsizing?isLoading&service=AmazonEC2&rightsizingType=%5B%22Terminate%22,%22Modify%22%5D&filter=%5B%7B%22dimension%22:%22LINKED_ACCOUNT%22,%22values%22:%5B$accounts_formatted%5D,%22include%22:true%7D%5D"
}
