#!/usr/bin/env python3

import json
import os
import subprocess
import jmespath
import argparse
import sys
import shlex

CACHEWS_DIR = (
    os.environ.get('CACHEWS_DIR') or
    os.environ.get('XDG_CACHE_HOME') or
    os.path.expanduser('~/.cache/cachews')
)
AWS_DEFAULT_REGION = os.environ.get('AWS_DEFAULT_REGION')
AWS_PROFILE = os.environ.get('AWS_PROFILE')
REAL_AWSCLI = os.environ.get('REAL_AWSCLI','awsX')
AWS_ACCOUNT_ALIAS = AWS_PROFILE[:-6] if AWS_PROFILE and AWS_PROFILE.endswith('-admin') else AWS_PROFILE

# Exit with usage if AWS_PROFILE is not set
if not AWS_PROFILE:
    print("AWS_PROFILE environment variable is not set", file=sys.stderr)
    sys.exit(1)

def list_or_describe(service, api_call, output_format='json', query=None):
    file_path = f"{CACHEWS_DIR}/{AWS_ACCOUNT_ALIAS}/{AWS_DEFAULT_REGION}/{service}/{api_call}.json"

    try:
        with open(file_path, 'r') as file:
           data = json.load(file)
    except FileNotFoundError:
        print(f'Cache miss for file: {file_path}', file=sys.stderr)
        args = ' '.join(shlex.quote(arg) for arg in sys.argv[1:])
        cmd = f"{REAL_AWSCLI} {args} --output json"
        print(f"Executing command: {cmd}", file=sys.stderr)
        try:
            data = json.loads(subprocess.check_output(cmd, shell=True, timeout=60))
        except subprocess.TimeoutExpired:
            print(f"Command timed out: {cmd}")
            return

        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        with open(file_path, 'w') as file:
            json.dump(data, file)

    if query:
        data = jmespath.search(query, data)

    if output_format == 'text':
        if data is not None:
            for item in data:
                print('\t'.join(str(value) for value in item))
    elif output_format == 'table':
        print('Not yet implemented')
    else:
        print(json.dumps(data, indent=4))

def main():
    parser = argparse.ArgumentParser(description='Mimics AWS list and describe functions')
    parser.add_argument('service', help='AWS service name')
    parser.add_argument('api_call', help='API call to execute (list or describe)')
    parser.add_argument('--output', choices=['json', 'text', 'table'], default='json', help='Output format')
    parser.add_argument('--query', help='JMESPath query string')

    args, unknown_args = parser.parse_known_args()
    list_or_describe(args.service, args.api_call, args.output, args.query)

if __name__ == '__main__':
    main()
