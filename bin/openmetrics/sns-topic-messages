#!/usr/bin/env python3

import boto3
import datetime
import os

def generate_openmetrics_data():
    aws_profile = os.environ.get('AWS_PROFILE', 'default')
    region = os.environ.get('AWS_DEFAULT_REGION', 'us-east-1')

    session = boto3.Session(profile_name=aws_profile, region_name=region)
    cloudwatch = session.client('cloudwatch')
    sns = session.client('sns')

    topics = sns.list_topics()['Topics']

    for topic in topics:
        topic_arn = topic['TopicArn']
        short_topic_name = topic_arn.split(':')[-1]

        metrics = ["NumberOfMessagesPublished", "NumberOfNotificationsDelivered", "NumberOfNotificationsFailed"]

        for metric in metrics:
            metric_data_query = {
                'Id': 'm1',
                'MetricStat': {
                    'Metric': {
                        'Namespace': 'AWS/SNS',
                        'MetricName': metric,
                        'Dimensions': [{'Name': 'TopicArn', 'Value': topic_arn}]
                    },
                    'Period': 300,
                    'Stat': 'Sum'
                },
                'ReturnData': True
            }

            end_time = datetime.datetime.utcnow()
            start_time = end_time - datetime.timedelta(minutes=5)

            metric_result = cloudwatch.get_metric_data(
                MetricDataQueries=[metric_data_query],
                StartTime=start_time,
                EndTime=end_time
            )
            
            if metric_result['MetricDataResults']:
                metric_value = metric_result['MetricDataResults'][0].get('Values', [0])
                if metric_value:
                    metric_value = metric_value[0]
                    print(f"# TYPE aws_sns_{metric.lower()} gauge")
                    print(f"aws_sns_{metric.lower()}{{account=\"{aws_profile}\",region=\"{region}\",topic=\"{short_topic_name}\"}} {metric_value}")
                else:
                    print(f"# No data for metric {metric} for topic {short_topic_name}")
            else:
                print(f"# No MetricDataResults for topic {short_topic_name}")

if __name__ == '__main__':
    generate_openmetrics_data()
